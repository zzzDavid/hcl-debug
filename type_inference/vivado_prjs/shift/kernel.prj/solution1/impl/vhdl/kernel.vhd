-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_V_ce0 : OUT STD_LOGIC;
    A_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_V_ce0 : OUT STD_LOGIC;
    x_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_V_ce0 : OUT STD_LOGIC;
    y_V_we0 : OUT STD_LOGIC;
    y_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.742000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=115,HLS_SYN_LUT=374,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_86_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln7_fu_92_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_reg_141 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln5_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sh_V_1_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_V_1_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V_load_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_69 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Result_s_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln778_fu_119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_69 <= i_reg_136;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_69 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                A_V_load_reg_167 <= A_V_q0;
                p_Val2_s_reg_156 <= x_V_q0;
                sh_V_1_reg_162 <= sh_V_1_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_136 <= i_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_80_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln7_reg_141(4 downto 0) <= zext_ln7_fu_92_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln7_reg_141(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln5_fu_80_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln5_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    A_V_address0 <= zext_ln7_fu_92_p1(4 - 1 downto 0);

    A_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_80_p2)
    begin
        if (((icmp_ln5_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_80_p2)
    begin
        if (((icmp_ln5_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_86_p2 <= std_logic_vector(unsigned(i_0_reg_69) + unsigned(ap_const_lv5_1));
    icmp_ln5_fu_80_p2 <= "1" when (i_0_reg_69 = ap_const_lv5_10) else "0";
    p_Result_s_fu_104_p3 <= p_Val2_s_reg_156(31 downto 31);
    r_V_1_fu_115_p2 <= std_logic_vector(shift_left(unsigned(A_V_load_reg_167),to_integer(unsigned('0' & p_Val2_s_reg_156(31-1 downto 0)))));
    r_V_fu_111_p2 <= std_logic_vector(shift_right(signed(A_V_load_reg_167),to_integer(unsigned('0' & sh_V_1_reg_162(31-1 downto 0)))));
    select_ln778_fu_119_p3 <= 
        r_V_fu_111_p2 when (p_Result_s_fu_104_p3(0) = '1') else 
        r_V_1_fu_115_p2;
    sh_V_1_fu_98_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_V_q0));
    x_V_address0 <= zext_ln7_fu_92_p1(4 - 1 downto 0);

    x_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_V_ce0 <= ap_const_logic_1;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_V_address0 <= zext_ln7_reg_141(4 - 1 downto 0);

    y_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_V_ce0 <= ap_const_logic_1;
        else 
            y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_V_d0 <= std_logic_vector(unsigned(A_V_load_reg_167) + unsigned(select_ln778_fu_119_p3));

    y_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_V_we0 <= ap_const_logic_1;
        else 
            y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln7_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_69),64));
end behav;
