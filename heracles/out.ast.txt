{
func top(hbm, sysreg) {
  SPAD.alloc_c = compute((33554432,), UInt(32)) {
    SPAD.alloc_c[i0] = 0
  }

  minstq.alloc_c = compute((16384,), UInt(64)) {
    minstq.alloc_c[i0] = 0
  }

  flags_msyncc = compute((1,), UInt(1)) {
    flags_msyncc[x] = 0
  }

  flags_active = compute((1,), UInt(1)) {
    flags_active[x] = 0
  }

  flags_halt = compute((1,), UInt(1)) {
    flags_halt[x] = 0
  }

  flags_stall = compute((1,), UInt(1)) {
    flags_stall[x] = 0
  }

  flags_stalled = compute((1,), UInt(1)) {
    flags_stalled[x] = 0
  }

  flags_break = compute((1,), UInt(1)) {
    flags_break[x] = 0
  }

  count_stop = compute((1,), UInt(1)) {
    count_stop[x] = 0
  }

  addr_stop = compute((1,), UInt(1)) {
    addr_stop[x] = 0
  }

  inst_addr = compute((1,), UInt(32)) {
    inst_addr[x] = 0
  }

  inst_naddr = compute((1,), UInt(32)) {
    inst_naddr[x] = 0
  }

  latency_count = compute((1,), UInt(32)) {
    latency_count[x] = 0
  }

  latstalled = compute((1,), UInt(1)) {
    latstalled[x] = 0
  }

  tele_inst_count = compute((1,), UInt(32)) {
    tele_inst_count[x] = 0
  }

  tele_stall_count = compute((1,), UInt(32)) {
    tele_stall_count[x] = 0
  }

  tele_latstall_count = compute((1,), UInt(32)) {
    tele_latstall_count[x] = 0
  }

  xinstq.alloc_c = compute((32768,), UInt(128)) {
    xinstq.alloc_c[i0] = 0
  }

  xinstq_bundles = compute((1,), UInt(32)) {
    xinstq_bundles[x] = 0
  }

  cinstq.alloc_c = compute((16384,), UInt(64)) {
    cinstq.alloc_c[i0] = 0
  }

  nop_count = compute((1,), UInt(32)) {
    nop_count[x] = 0
  }

  csyncm = compute((1,), UInt(1)) {
    csyncm[x] = 0
  }

  cstore_cycle = compute((1,), UInt(3)) {
    cstore_cycle[x] = 0
  }

  cstore_valid = compute((1,), UInt(1)) {
    cstore_valid[x] = 0
  }

  cstore_spadaddr = compute((1,), UInt(32)) {
    cstore_spadaddr[x] = 0
  }

  flags_active_21 = compute((1,), UInt(1)) {
    flags_active_21[x] = 0
  }

  flags_halt_22 = compute((1,), UInt(1)) {
    flags_halt_22[x] = 0
  }

  flags_stall_23 = compute((1,), UInt(1)) {
    flags_stall_23[x] = 0
  }

  flags_stalled_24 = compute((1,), UInt(1)) {
    flags_stalled_24[x] = 0
  }

  flags_break_25 = compute((1,), UInt(1)) {
    flags_break_25[x] = 0
  }

  count_stop_26 = compute((1,), UInt(1)) {
    count_stop_26[x] = 0
  }

  addr_stop_27 = compute((1,), UInt(1)) {
    addr_stop_27[x] = 0
  }

  inst_addr_28 = compute((1,), UInt(32)) {
    inst_addr_28[x] = 0
  }

  inst_naddr_29 = compute((1,), UInt(32)) {
    inst_naddr_29[x] = 0
  }

  latency_count_30 = compute((1,), UInt(32)) {
    latency_count_30[x] = 0
  }

  latstalled_31 = compute((1,), UInt(1)) {
    latstalled_31[x] = 0
  }

  tele_inst_count_32 = compute((1,), UInt(32)) {
    tele_inst_count_32[x] = 0
  }

  tele_stall_count_33 = compute((1,), UInt(32)) {
    tele_stall_count_33[x] = 0
  }

  tele_latstall_count_34 = compute((1,), UInt(32)) {
    tele_latstall_count_34[x] = 0
  }

  RFfoo.alloc_c = compute((4, 72, 8192), UInt(32)) {
    RFfoo.alloc_c[i0, i1, i2] = 0
  }

  twpwrs.alloc_c = compute((32, 64), UInt(32)) {
    twpwrs.alloc_c[i0, i1] = 0
  }

  mone.alloc_c = compute((64,), UInt(32)) {
    mone.alloc_c[i0] = 0
  }

  nop_count_35 = compute((1,), UInt(32)) {
    nop_count_35[x] = 0
  }

  flag_ntt = compute((1,), UInt(1)) {
    flag_ntt[x] = 0
  }

  flag_intt = compute((1,), UInt(1)) {
    flag_intt[x] = 0
  }

  ntt_intt_top_addr = compute((1,), UInt(9)) {
    ntt_intt_top_addr[x] = 0
  }

  ntt_intt_bot_addr = compute((1,), UInt(9)) {
    ntt_intt_bot_addr[x] = 0
  }

  instq.alloc_c = compute((16,), UInt(128)) {
    instq.alloc_c[i0] = 0
  }

  nttdataintop.alloc_c = compute((8192,), UInt(32)) {
    nttdataintop.alloc_c[i0] = 0
  }

  nttdatainbot.alloc_c = compute((8192,), UInt(32)) {
    nttdatainbot.alloc_c[i0] = 0
  }

  nttdataouttop.alloc_c = compute((8192,), UInt(32)) {
    nttdataouttop.alloc_c[i0] = 0
  }

  nttdataoutbot.alloc_c = compute((8192,), UInt(32)) {
    nttdataoutbot.alloc_c[i0] = 0
  }

  inttdataintop.alloc_c = compute((8192,), UInt(32)) {
    inttdataintop.alloc_c[i0] = 0
  }

  inttdatainbot.alloc_c = compute((8192,), UInt(32)) {
    inttdatainbot.alloc_c[i0] = 0
  }

  inttdataouttop.alloc_c = compute((8192,), UInt(32)) {
    inttdataouttop.alloc_c[i0] = 0
  }

  inttdataoutbot.alloc_c = compute((8192,), UInt(32)) {
    inttdataoutbot.alloc_c[i0] = 0
  }

  ntt_ain.alloc_c = compute((8192,), UInt(32)) {
    ntt_ain.alloc_c[i0] = 0
  }

  ntt_bin.alloc_c = compute((8192,), UInt(32)) {
    ntt_bin.alloc_c[i0] = 0
  }

  ntt_win.alloc_c = compute((8192,), UInt(32)) {
    ntt_win.alloc_c[i0] = 0
  }

  mone_val = compute((1,), UInt(32)) {
    mone_val[x] = 0
  }

  uc_start_delay = compute((1,), UInt(4)) {
    uc_start_delay[x] = 0
  }

  flags_active_42 = compute((1,), UInt(1)) {
    flags_active_42[x] = 0
  }

  flags_halt_43 = compute((1,), UInt(1)) {
    flags_halt_43[x] = 0
  }

  flags_stall_44 = compute((1,), UInt(1)) {
    flags_stall_44[x] = 0
  }

  flags_stalled_45 = compute((1,), UInt(1)) {
    flags_stalled_45[x] = 0
  }

  flags_break_46 = compute((1,), UInt(1)) {
    flags_break_46[x] = 0
  }

  count_stop_47 = compute((1,), UInt(1)) {
    count_stop_47[x] = 0
  }

  addr_stop_48 = compute((1,), UInt(1)) {
    addr_stop_48[x] = 0
  }

  inst_addr_49 = compute((1,), UInt(5)) {
    inst_addr_49[x] = 0
  }

  inst_naddr_50 = compute((1,), UInt(5)) {
    inst_naddr_50[x] = 0
  }

  latency_count_51 = compute((1,), UInt(32)) {
    latency_count_51[x] = 0
  }

  latstalled_52 = compute((1,), UInt(1)) {
    latstalled_52[x] = 0
  }

  tele_inst_count_53 = compute((1,), UInt(32)) {
    tele_inst_count_53[x] = 0
  }

  tele_stall_count_54 = compute((1,), UInt(32)) {
    tele_stall_count_54[x] = 0
  }

  tele_latstall_count_55 = compute((1,), UInt(32)) {
    tele_latstall_count_55[x] = 0
  }

  flags_active_56 = compute((1,), UInt(1)) {
    flags_active_56[x] = 0
  }

  flags_halt_57 = compute((1,), UInt(1)) {
    flags_halt_57[x] = 0
  }

  flags_stall_58 = compute((1,), UInt(1)) {
    flags_stall_58[x] = 0
  }

  flags_stalled_59 = compute((1,), UInt(1)) {
    flags_stalled_59[x] = 0
  }

  flags_break_60 = compute((1,), UInt(1)) {
    flags_break_60[x] = 0
  }

  count_stop_61 = compute((1,), UInt(1)) {
    count_stop_61[x] = 0
  }

  addr_stop_62 = compute((1,), UInt(1)) {
    addr_stop_62[x] = 0
  }

  inst_addr_63 = compute((1,), UInt(32)) {
    inst_addr_63[x] = 0
  }

  inst_naddr_64 = compute((1,), UInt(32)) {
    inst_naddr_64[x] = 0
  }

  latency_count_65 = compute((1,), UInt(32)) {
    latency_count_65[x] = 0
  }

  latstalled_66 = compute((1,), UInt(1)) {
    latstalled_66[x] = 0
  }

  tele_inst_count_67 = compute((1,), UInt(32)) {
    tele_inst_count_67[x] = 0
  }

  tele_stall_count_68 = compute((1,), UInt(32)) {
    tele_stall_count_68[x] = 0
  }

  tele_latstall_count_69 = compute((1,), UInt(32)) {
    tele_latstall_count_69[x] = 0
  }

  print(0, FIX ME : binding minstq as hbm for now ...
)
  print(0, FIX ME : binding cinstq as hbm for now ...
)
  sys_steps = compute((1,), UInt(32)) {
    sys_steps[x] = 1
  }

  sys_done = compute((1,), UInt(1)) {
    sys_done[x] = 0
  }

  flags_msyncc[0] = 0
  flags_active[0] = 0
  flags_halt[0] = 0
  flags_stall[0] = 0
  flags_stalled[0] = 0
  flags_break[0] = 0
  count_stop[0] = 0
  addr_stop[0] = 0
  inst_addr[0] = 0
  inst_naddr[0] = 0
  latency_count[0] = 0
  latstalled[0] = 0
  tele_inst_count[0] = 0
  tele_stall_count[0] = 0
  tele_latstall_count[0] = 0
  nop_count[0] = 0
  csyncm[0] = 0
  cstore_cycle[0] = 0
  cstore_valid[0] = 0
  cstore_spadaddr[0] = 0
  xinstq_bundles[0] = 0
  flags_active_21[0] = 0
  flags_halt_22[0] = 0
  flags_stall_23[0] = 0
  flags_stalled_24[0] = 0
  flags_break_25[0] = 0
  count_stop_26[0] = 0
  addr_stop_27[0] = 0
  inst_addr_28[0] = 0
  inst_naddr_29[0] = 0
  latency_count_30[0] = 0
  latstalled_31[0] = 0
  tele_inst_count_32[0] = 0
  tele_stall_count_33[0] = 0
  tele_latstall_count_34[0] = 0
  nop_count_35[0] = 0
  flag_ntt[0] = 0
  flag_intt[0] = 0
  ntt_intt_top_addr[0] = 0
  ntt_intt_bot_addr[0] = 0
  uc_start_delay[0] = 0
  flags_active_42[0] = 0
  flags_halt_43[0] = 0
  flags_stall_44[0] = 0
  flags_stalled_45[0] = 0
  flags_break_46[0] = 0
  count_stop_47[0] = 0
  addr_stop_48[0] = 0
  inst_addr_49[0] = 0
  inst_naddr_50[0] = 0
  latency_count_51[0] = 0
  latstalled_52[0] = 0
  tele_inst_count_53[0] = 0
  tele_stall_count_54[0] = 0
  tele_latstall_count_55[0] = 0
  flags_active_56[0] = 0
  flags_halt_57[0] = 0
  flags_stall_58[0] = 0
  flags_stalled_59[0] = 0
  flags_break_60[0] = 0
  count_stop_61[0] = 0
  addr_stop_62[0] = 0
  inst_addr_63[0] = 0
  inst_naddr_64[0] = 0
  latency_count_65[0] = 0
  latstalled_66[0] = 0
  tele_inst_count_67[0] = 0
  tele_stall_count_68[0] = 0
  tele_latstall_count_69[0] = 0
  while ((sys_done[0] eq 0)) {
    if (flag_ntt[0] ne 0) {
      rfaddr = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
        rfaddr[x] = ntt_intt_top_addr[0]
      }

      bv = compute((1,), UInt(3)) {
        bv[x] = (uint2 rfaddr[0].1 : UInt(2))
      }

      rv = compute((1,), UInt(8)) {
        rv[x] = (uint7 rfaddr[0].0 : UInt(7))
      }

      count = compute((1,), UInt(32)) {
        count[x] = 8192
      }

      src_addr = compute((1,), UInt(32)) {
        src_addr[x] = 0
      }

      dst_addr = compute((1,), UInt(32)) {
        dst_addr[x] = 0
      }

      _addr = compute((1,), UInt(32)) {
        _addr[x] = src_addr[0]
      }

      assert_cond = compute((1,), UInt(1)) {
        assert_cond[x] = ((_addr[0] + count[0]) le 8192)
      }

      if (assert_cond[0] eq 0) {
        print(_addr[0], (_addr[0] + count[0]), 

Assertion failed {schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:184,tile.py:411,mem.py:172,mem.py:106,hcl_ext.py:727}: nttdataintop Mem.copyto exceeds memory size: addr=%d+size=%d > 8192

)
        while ((assert_cond[0] eq 0)) {
          assert_cond[0] = 0
        }
      }
      copyN = compute((count[0],), None) {
        RFfoo.alloc_c[bv[0], rv[0], (dst_addr[0] + i)] = nttdataintop.alloc_c[(src_addr[0] + i)]
      }

      rfaddr_80 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
        rfaddr_80[x] = ntt_intt_bot_addr[0]
      }

      bv_81 = compute((1,), UInt(3)) {
        bv_81[x] = (uint2 rfaddr_80[0].1 : UInt(2))
      }

      rv_82 = compute((1,), UInt(8)) {
        rv_82[x] = (uint7 rfaddr_80[0].0 : UInt(7))
      }

      count_83 = compute((1,), UInt(32)) {
        count_83[x] = 8192
      }

      src_addr_84 = compute((1,), UInt(32)) {
        src_addr_84[x] = 0
      }

      dst_addr_85 = compute((1,), UInt(32)) {
        dst_addr_85[x] = 0
      }

      _addr_86 = compute((1,), UInt(32)) {
        _addr_86[x] = src_addr_84[0]
      }

      assert_cond_87 = compute((1,), UInt(1)) {
        assert_cond_87[x] = ((_addr_86[0] + count_83[0]) le 8192)
      }

      if (assert_cond_87[0] eq 0) {
        print(_addr_86[0], (_addr_86[0] + count_83[0]), 

Assertion failed {schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:184,tile.py:413,mem.py:172,mem.py:106,hcl_ext.py:727}: nttdatainbot Mem.copyto exceeds memory size: addr=%d+size=%d > 8192

)
        while ((assert_cond_87[0] eq 0)) {
          assert_cond_87[0] = 0
        }
      }
      copyN_22 = compute((count_83[0],), None) {
        RFfoo.alloc_c[bv_81[0], rv_82[0], (dst_addr_85[0] + i)] = nttdatainbot.alloc_c[(src_addr_84[0] + i)]
      }

      flag_ntt[0] = 0
    }
    if (flag_intt[0] ne 0) {
      rfaddr_88 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
        rfaddr_88[x] = ntt_intt_top_addr[0]
      }

      bv_89 = compute((1,), UInt(3)) {
        bv_89[x] = (uint2 rfaddr_88[0].1 : UInt(2))
      }

      rv_90 = compute((1,), UInt(8)) {
        rv_90[x] = (uint7 rfaddr_88[0].0 : UInt(7))
      }

      count_91 = compute((1,), UInt(32)) {
        count_91[x] = 8192
      }

      src_addr_92 = compute((1,), UInt(32)) {
        src_addr_92[x] = 0
      }

      dst_addr_93 = compute((1,), UInt(32)) {
        dst_addr_93[x] = 0
      }

      _addr_94 = compute((1,), UInt(32)) {
        _addr_94[x] = src_addr_92[0]
      }

      assert_cond_95 = compute((1,), UInt(1)) {
        assert_cond_95[x] = ((_addr_94[0] + count_91[0]) le 8192)
      }

      if (assert_cond_95[0] eq 0) {
        print(_addr_94[0], (_addr_94[0] + count_91[0]), 

Assertion failed {schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:184,tile.py:422,mem.py:172,mem.py:106,hcl_ext.py:727}: inttdataintop Mem.copyto exceeds memory size: addr=%d+size=%d > 8192

)
        while ((assert_cond_95[0] eq 0)) {
          assert_cond_95[0] = 0
        }
      }
      copyN_23 = compute((count_91[0],), None) {
        RFfoo.alloc_c[bv_89[0], rv_90[0], (dst_addr_93[0] + i)] = inttdataintop.alloc_c[(src_addr_92[0] + i)]
      }

      rfaddr_96 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
        rfaddr_96[x] = ntt_intt_bot_addr[0]
      }

      bv_97 = compute((1,), UInt(3)) {
        bv_97[x] = (uint2 rfaddr_96[0].1 : UInt(2))
      }

      rv_98 = compute((1,), UInt(8)) {
        rv_98[x] = (uint7 rfaddr_96[0].0 : UInt(7))
      }

      count_99 = compute((1,), UInt(32)) {
        count_99[x] = 8192
      }

      src_addr_100 = compute((1,), UInt(32)) {
        src_addr_100[x] = 0
      }

      dst_addr_101 = compute((1,), UInt(32)) {
        dst_addr_101[x] = 0
      }

      _addr_102 = compute((1,), UInt(32)) {
        _addr_102[x] = src_addr_100[0]
      }

      assert_cond_103 = compute((1,), UInt(1)) {
        assert_cond_103[x] = ((_addr_102[0] + count_99[0]) le 8192)
      }

      if (assert_cond_103[0] eq 0) {
        print(_addr_102[0], (_addr_102[0] + count_99[0]), 

Assertion failed {schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:184,tile.py:424,mem.py:172,mem.py:106,hcl_ext.py:727}: inttdatainbot Mem.copyto exceeds memory size: addr=%d+size=%d > 8192

)
        while ((assert_cond_103[0] eq 0)) {
          assert_cond_103[0] = 0
        }
      }
      copyN_24 = compute((count_99[0],), None) {
        RFfoo.alloc_c[bv_97[0], rv_98[0], (dst_addr_101[0] + i)] = inttdatainbot.alloc_c[(src_addr_100[0] + i)]
      }

      flag_intt[0] = 0
    }
    if (((0 || (uint1 flags_active_56[0] : UInt(1))) || (uint1 flags_halt_57[0] : UInt(1))) eq 0) {
      read_addr = compute((1,), UInt(32)) {
        read_addr[x] = 0
      }

      _addr_105 = compute((1,), UInt(32)) {
        _addr_105[x] = read_addr[0]
      }

      assert_cond_106 = compute((1,), UInt(1)) {
        assert_cond_106[x] = ((_addr_105[0] + 1) le 10)
      }

      if (assert_cond_106[0] eq 0) {
        print(_addr_105[0], (_addr_105[0] + 1), 

Assertion failed {schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,heracles_soc.py:61,proc.py:91,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: Sysreg Mem.read exceeds memory size: addr=%d+size=%d > 10

)
        while ((assert_cond_106[0] eq 0)) {
          assert_cond_106[0] = 0
        }
      }
      Mem.read_c = compute((1,), UInt(64)) {
        Mem.read_c[i] = sysreg[(read_addr[0] + i)]
      }

      assert_cond_107 = compute((1,), UInt(1)) {
        assert_cond_107[x] = (flags_active_56[0] eq 0)
      }

      if (assert_cond_107[0] eq 0) {
        print(0, 

Assertion failed {schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,heracles_soc.py:61,proc.py:91,uController.py:263,hcl_ext.py:727}: proc.UC: uController already/still active?

)
        while ((assert_cond_107[0] eq 0)) {
          assert_cond_107[0] = 0
        }
      }
      flags_active_56[0] = 0
      flags_halt_57[0] = 0
      flags_stall_58[0] = 0
      flags_stalled_59[0] = 0
      flags_break_60[0] = 0
      count_stop_61[0] = 0
      addr_stop_62[0] = 0
      inst_addr_63[0] = 0
      inst_naddr_64[0] = 0
      latency_count_65[0] = 0
      latstalled_66[0] = 0
      inst_addr_63[0] = Mem.read_c[0]
      flags_active_56[0] = 1
    }
    else if ((flags_active_56[0] eq 0)) {
      sys_done[0] = 1
    }
    flags_stall[0] = 0
    flags_break[0] = 0
    count_stop[0] = 0
    addr_stop[0] = 0
    while_cont = compute((1,), UInt(1)) {
      while_cont[x] = 1
    }

    while ((while_cont[0] ne 0)) {
      assert_cond_109 = compute((1,), UInt(1)) {
        assert_cond_109[x] = (((0 || (uint1 (latstalled[0] eq 1) : UInt(1))) || (uint1 (latency_count[0] eq 0) : UInt(1))) ne 0)
      }

      if (assert_cond_109[0] eq 0) {
        print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,mfetch.py:106,uController.py:153,hcl_ext.py:727}: 

)
        while ((assert_cond_109[0] eq 0)) {
          assert_cond_109[0] = 0
        }
      }
      if (latency_count[0] eq 0) {
        _cur_address = compute((1,), UInt(32)) {
          _cur_address[x] = inst_addr[0]
        }

        inst_naddr[0] = (inst_addr[0] + 2)
        inst = compute((1,), UInt(64)) {
          inst[x] = 0
        }

        read_addr_112 = compute((1,), Int(34)) {
          read_addr_112[x] = (inst_addr[0] + 0)
        }

        _addr_113 = compute((1,), Int(34)) {
          _addr_113[x] = read_addr_112[0]
        }

        assert_cond_114 = compute((1,), UInt(1)) {
          assert_cond_114[x] = ((_addr_113[0] + 1) le 33554432)
        }

        if (assert_cond_114[0] eq 0) {
          print(_addr_113[0], (_addr_113[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,mfetch.py:106,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_114[0] eq 0)) {
            assert_cond_114[0] = 0
          }
        }
        Mem.read_c_26 = compute((1,), UInt(32)) {
          Mem.read_c_26[i] = hbm[(read_addr_112[0] + i)]
        }

        inst[0] = ((inst[0] << 32) | Mem.read_c_26[0])
        read_addr_115 = compute((1,), Int(34)) {
          read_addr_115[x] = (inst_addr[0] + 1)
        }

        _addr_116 = compute((1,), Int(34)) {
          _addr_116[x] = read_addr_115[0]
        }

        assert_cond_117 = compute((1,), UInt(1)) {
          assert_cond_117[x] = ((_addr_116[0] + 1) le 33554432)
        }

        if (assert_cond_117[0] eq 0) {
          print(_addr_116[0], (_addr_116[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,mfetch.py:106,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_117[0] eq 0)) {
            assert_cond_117[0] = 0
          }
        }
        Mem.read_c_27 = compute((1,), UInt(32)) {
          Mem.read_c_27[i] = hbm[(read_addr_115[0] + i)]
        }

        inst[0] = ((inst[0] << 32) | Mem.read_c_27[0])
        inst_lat = compute((1,), UInt(32)) {
          inst_lat[x] = 0
        }

        decode_inst = compute((1,), UInt(64)) {
          decode_inst[x] = inst[0]
        }

        inst_id = compute((1,), UInt(16)) {
          inst_id[x] = 0
        }

        dec_inst_mload = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('spadaddr', UInt(11)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(29))]))) {
          dec_inst_mload[x] = decode_inst[0]
        }

        if (1 && (uint1 (dec_inst_mload[0].0 eq (uint3 0 : UInt(3))) : UInt(1))) {
          inst_id[0] = 0
          inst_lat[0] = 1
        }
        else {
          dec_inst_mstore = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('spadaddr', UInt(11)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(29))]))) {
            dec_inst_mstore[x] = decode_inst[0]
          }

          if (1 && (uint1 (dec_inst_mstore[0].0 eq (uint3 1 : UInt(3))) : UInt(1))) {
            inst_id[0] = 1
            inst_lat[0] = 1
          }
          else {
            dec_inst_msyncc = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('__rsrv3__', UInt(32)), ('cinstqaddr', UInt(15)), ('__rsrv__', UInt(14))]))) {
              dec_inst_msyncc[x] = decode_inst[0]
            }

            if (1 && (uint1 (dec_inst_msyncc[0].0 eq (uint3 2 : UInt(3))) : UInt(1))) {
              inst_id[0] = 2
              inst_lat[0] = 1
            }
            else {
              dec_inst_mexit = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('__rsrv__', UInt(61))]))) {
                dec_inst_mexit[x] = decode_inst[0]
              }

              if (1 && (uint1 (dec_inst_mexit[0].0 eq (uint3 3 : UInt(3))) : UInt(1))) {
                inst_id[0] = 3
                inst_lat[0] = 1
              }
              else {
                assert_cond_125 = compute((1,), UInt(1)) {
                  assert_cond_125[x] = 0
                }

                if (assert_cond_125[0] eq 0) {
                  print(decode_inst[0], _cur_address[0], 

Assertion failed {hcl_ext.py:855,mfetch.py:106,uController.py:162,instruction.py:296,instruction.py:294,instruction.py:265,hcl_ext.py:727}: 

ce0.mf.UC.decode Invalid instruction (%d) at address %d


)
                  while ((assert_cond_125[0] eq 0)) {
                    assert_cond_125[0] = 0
                  }
                }
                inst_id[0] = 4
              }
            }
          }
        }
        if (((0 || (uint1 (inst_lat[0] le 1) : UInt(1))) || (uint1 (latstalled[0] eq 1) : UInt(1))) ne 0) {
          execute_inst = compute((1,), UInt(64)) {
            execute_inst[x] = inst[0]
          }

          if (inst_id[0] eq 0) {
            exe_inst_ce0.mf.UC_mload = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('spadaddr', UInt(11)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(29))]))) {
              exe_inst_ce0.mf.UC_mload[x] = execute_inst[0]
            }

            sa = compute((1,), UInt(32)) {
              sa[x] = exe_inst_ce0.mf.UC_mload[0].1
            }

            sa[0] = (sa[0] << 13)
            ha = compute((1,), UInt(32)) {
              ha[x] = exe_inst_ce0.mf.UC_mload[0].2
            }

            ha[0] = (ha[0] << 13)
            count_130 = compute((1,), UInt(32)) {
              count_130[x] = 8192
            }

            src_addr_131 = compute((1,), UInt(32)) {
              src_addr_131[x] = ha[0]
            }

            dst_addr_132 = compute((1,), UInt(32)) {
              dst_addr_132[x] = sa[0]
            }

            _addr_133 = compute((1,), UInt(32)) {
              _addr_133[x] = src_addr_131[0]
            }

            assert_cond_134 = compute((1,), UInt(1)) {
              assert_cond_134[x] = ((_addr_133[0] + count_130[0]) le 33554432)
            }

            if (assert_cond_134[0] eq 0) {
              print(_addr_133[0], (_addr_133[0] + count_130[0]), 

Assertion failed {hcl_ext.py:865,hcl_ext.py:855,mfetch.py:106,uController.py:172,instruction.py:321,instruction.py:318,mfetch.py:136,mem.py:172,mem.py:106,hcl_ext.py:727}: HBM Mem.copyto exceeds memory size: addr=%d+size=%d > 33554432

)
              while ((assert_cond_134[0] eq 0)) {
                assert_cond_134[0] = 0
              }
            }
            copyN_28 = compute((count_130[0],), None) {
              SPAD.alloc_c[(dst_addr_132[0] + i)] = hbm[(src_addr_131[0] + i)]
            }

          }
          else {
            if (inst_id[0] eq 1) {
              exe_inst_ce0.mf.UC_mstore = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('spadaddr', UInt(11)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(29))]))) {
                exe_inst_ce0.mf.UC_mstore[x] = execute_inst[0]
              }

              sa_136 = compute((1,), UInt(32)) {
                sa_136[x] = exe_inst_ce0.mf.UC_mstore[0].1
              }

              sa_136[0] = (sa_136[0] << 13)
              ha_137 = compute((1,), UInt(32)) {
                ha_137[x] = exe_inst_ce0.mf.UC_mstore[0].2
              }

              ha_137[0] = (ha_137[0] << 13)
              count_138 = compute((1,), UInt(32)) {
                count_138[x] = 8192
              }

              src_addr_139 = compute((1,), UInt(32)) {
                src_addr_139[x] = sa_136[0]
              }

              dst_addr_140 = compute((1,), UInt(32)) {
                dst_addr_140[x] = ha_137[0]
              }

              _addr_141 = compute((1,), UInt(32)) {
                _addr_141[x] = src_addr_139[0]
              }

              assert_cond_142 = compute((1,), UInt(1)) {
                assert_cond_142[x] = ((_addr_141[0] + count_138[0]) le 33554432)
              }

              if (assert_cond_142[0] eq 0) {
                print(_addr_141[0], (_addr_141[0] + count_138[0]), 

Assertion failed {hcl_ext.py:855,mfetch.py:106,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,mfetch.py:150,mem.py:172,mem.py:106,hcl_ext.py:727}: SPAD Mem.copyto exceeds memory size: addr=%d+size=%d > 33554432

)
                while ((assert_cond_142[0] eq 0)) {
                  assert_cond_142[0] = 0
                }
              }
              copyN_29 = compute((count_138[0],), None) {
                hbm[(dst_addr_140[0] + i)] = SPAD.alloc_c[(src_addr_139[0] + i)]
              }

            }
            else {
              if (inst_id[0] eq 2) {
                exe_inst_ce0.mf.UC_msyncc = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('__rsrv3__', UInt(32)), ('cinstqaddr', UInt(15)), ('__rsrv__', UInt(14))]))) {
                  exe_inst_ce0.mf.UC_msyncc[x] = execute_inst[0]
                }

                if (tele_inst_count_32[0] le exe_inst_ce0.mf.UC_msyncc[0].2) {
                  tele_stall_count[0] = (tele_stall_count[0] + 1)
                  flags_stall[0] = 1
                  flags_stalled[0] = 1
                  flags_break[0] = 1
                }
                else {
                }
              }
              else {
                if (inst_id[0] eq 3) {
                  exe_inst_ce0.mf.UC_mexit = compute((1,), Struct(OrderedDict([('opcode', UInt(3)), ('__rsrv__', UInt(61))]))) {
                    exe_inst_ce0.mf.UC_mexit[x] = execute_inst[0]
                  }

                  flags_halt[0] = 1
                  flags_active[0] = 0
                  flags_break[0] = 1
                }
                else {
                  print(0, Invalid instruction : 0x)
                  print(execute_inst[0], %016lx)
                  print(0, 
)
                  assert_cond_145 = compute((1,), UInt(1)) {
                    assert_cond_145[x] = 0
                  }

                  if (assert_cond_145[0] eq 0) {
                    print(0, 

Assertion failed {hcl_ext.py:855,mfetch.py:106,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:309,hcl_ext.py:727}: ce0.mf.UC.decode Invalid instruction

)
                    while ((assert_cond_145[0] eq 0)) {
                      assert_cond_145[0] = 0
                    }
                  }
                }
              }
            }
          }
          latstalled[0] = 0
          if (inst_lat[0] ne 0) {
            flags_break[0] = 1
          }
          if (flags_stall[0] eq 0) {
            tele_inst_count[0] = (tele_inst_count[0] + 1)
            inst_addr[0] = inst_naddr[0]
            flags_stalled[0] = 0
          }
        }
        else {
          latency_count[0] = (inst_lat[0] - 2)
          tele_latstall_count[0] = (tele_latstall_count[0] + 1)
          latstalled[0] = 1
          flags_break[0] = 1
        }
      }
      else {
        assert_cond_146 = compute((1,), UInt(1)) {
          assert_cond_146[x] = (latstalled[0] eq 1)
        }

        if (assert_cond_146[0] eq 0) {
          print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,mfetch.py:106,uController.py:213,hcl_ext.py:727}: latency countdown but not latstalled?

)
          while ((assert_cond_146[0] eq 0)) {
            assert_cond_146[0] = 0
          }
        }
        latency_count[0] = (latency_count[0] - 1)
        tele_latstall_count[0] = (tele_latstall_count[0] + 1)
        latstalled[0] = 1
        flags_break[0] = 1
      }
    }
    flags_stall_23[0] = 0
    flags_break_25[0] = 0
    count_stop_26[0] = 0
    addr_stop_27[0] = 0
    while_cont_147 = compute((1,), UInt(1)) {
      while_cont_147[x] = 1
    }

    while ((while_cont_147[0] ne 0)) {
      assert_cond_148 = compute((1,), UInt(1)) {
        assert_cond_148[x] = (((0 || (uint1 (latstalled_31[0] eq 1) : UInt(1))) || (uint1 (latency_count_30[0] eq 0) : UInt(1))) ne 0)
      }

      if (assert_cond_148[0] eq 0) {
        print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,cfetch.py:204,uController.py:153,hcl_ext.py:727}: 

)
        while ((assert_cond_148[0] eq 0)) {
          assert_cond_148[0] = 0
        }
      }
      if (latency_count_30[0] eq 0) {
        _cur_address_149 = compute((1,), UInt(32)) {
          _cur_address_149[x] = inst_addr_28[0]
        }

        inst_naddr_29[0] = (inst_addr_28[0] + 2)
        inst_150 = compute((1,), UInt(64)) {
          inst_150[x] = 0
        }

        read_addr_151 = compute((1,), Int(34)) {
          read_addr_151[x] = (inst_addr_28[0] + 0)
        }

        _addr_152 = compute((1,), Int(34)) {
          _addr_152[x] = read_addr_151[0]
        }

        assert_cond_153 = compute((1,), UInt(1)) {
          assert_cond_153[x] = ((_addr_152[0] + 1) le 33554432)
        }

        if (assert_cond_153[0] eq 0) {
          print(_addr_152[0], (_addr_152[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,cfetch.py:204,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_153[0] eq 0)) {
            assert_cond_153[0] = 0
          }
        }
        Mem.read_c_30 = compute((1,), UInt(32)) {
          Mem.read_c_30[i] = hbm[(read_addr_151[0] + i)]
        }

        inst_150[0] = ((inst_150[0] << 32) | Mem.read_c_30[0])
        read_addr_154 = compute((1,), Int(34)) {
          read_addr_154[x] = (inst_addr_28[0] + 1)
        }

        _addr_155 = compute((1,), Int(34)) {
          _addr_155[x] = read_addr_154[0]
        }

        assert_cond_156 = compute((1,), UInt(1)) {
          assert_cond_156[x] = ((_addr_155[0] + 1) le 33554432)
        }

        if (assert_cond_156[0] eq 0) {
          print(_addr_155[0], (_addr_155[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,cfetch.py:204,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_156[0] eq 0)) {
            assert_cond_156[0] = 0
          }
        }
        Mem.read_c_31 = compute((1,), UInt(32)) {
          Mem.read_c_31[i] = hbm[(read_addr_154[0] + i)]
        }

        inst_150[0] = ((inst_150[0] << 32) | Mem.read_c_31[0])
        inst_lat_157 = compute((1,), UInt(32)) {
          inst_lat_157[x] = 0
        }

        decode_inst_158 = compute((1,), UInt(64)) {
          decode_inst_158[x] = inst_150[0]
        }

        inst_id_159 = compute((1,), UInt(16)) {
          inst_id_159[x] = 0
        }

        dec_inst_nop = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('count', UInt(11)), ('__rsrv__', UInt(36))]))) {
          dec_inst_nop[x] = decode_inst_158[0]
        }

        if (((1 && (uint1 (dec_inst_nop[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_nop[0].3 eq (uint3 0 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_nop[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
          inst_id_159[0] = 0
          inst_lat_157[0] = 1
        }
        else {
          dec_inst_ifetch = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('bundle', UInt(11)), ('__rsrv__', UInt(36))]))) {
            dec_inst_ifetch[x] = decode_inst_158[0]
          }

          if (((1 && (uint1 (dec_inst_ifetch[0].4 eq (uint1 1 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_ifetch[0].3 eq (uint3 0 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_ifetch[0].2 eq (uint2 1 : UInt(2))) : UInt(1))) {
            inst_id_159[0] = 1
            inst_lat_157[0] = 2
          }
          else {
            dec_inst_bload = compute((1,), Struct(OrderedDict([('rfaddr', UInt(9)), ('colnum', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
              dec_inst_bload[x] = decode_inst_158[0]
            }

            if (((1 && (uint1 (dec_inst_bload[0].4 eq (uint1 1 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_bload[0].3 eq (uint3 0 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_bload[0].2 eq (uint2 2 : UInt(2))) : UInt(1))) {
              inst_id_159[0] = 2
              inst_lat_157[0] = 4
            }
            else {
              dec_inst_bones = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('colnum', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                dec_inst_bones[x] = decode_inst_158[0]
              }

              if (((1 && (uint1 (dec_inst_bones[0].4 eq (uint1 1 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_bones[0].3 eq (uint3 1 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_bones[0].2 eq (uint2 0 : UInt(2))) : UInt(1))) {
                inst_id_159[0] = 3
                inst_lat_157[0] = 4
              }
              else {
                dec_inst_cload = compute((1,), Struct(OrderedDict([('rfaddr', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                  dec_inst_cload[x] = decode_inst_158[0]
                }

                if (((1 && (uint1 (dec_inst_cload[0].4 eq (uint1 1 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_cload[0].3 eq (uint3 0 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_cload[0].2 eq (uint2 0 : UInt(2))) : UInt(1))) {
                  inst_id_159[0] = 4
                  inst_lat_157[0] = 5
                }
                else {
                  dec_inst_cstore = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                    dec_inst_cstore[x] = decode_inst_158[0]
                  }

                  if (((1 && (uint1 (dec_inst_cstore[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_cstore[0].3 eq (uint3 1 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_cstore[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
                    inst_id_159[0] = 5
                    inst_lat_157[0] = 1
                  }
                  else {
                    dec_inst_cexit = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('__rsrv__', UInt(36))]))) {
                      dec_inst_cexit[x] = decode_inst_158[0]
                    }

                    if (((1 && (uint1 (dec_inst_cexit[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_cexit[0].3 eq (uint3 3 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_cexit[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
                      inst_id_159[0] = 6
                      inst_lat_157[0] = 1
                    }
                    else {
                      dec_inst_csyncm = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('minstqaddr', UInt(15)), ('__rsrv__', UInt(21))]))) {
                        dec_inst_csyncm[x] = decode_inst_158[0]
                      }

                      if (((1 && (uint1 (dec_inst_csyncm[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_csyncm[0].3 eq (uint3 2 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_csyncm[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
                        inst_id_159[0] = 7
                        inst_lat_157[0] = 1
                      }
                      else {
                        dec_inst_xinstfetch = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('xinstqaddr', UInt(12)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(3))]))) {
                          dec_inst_xinstfetch[x] = decode_inst_158[0]
                        }

                        if (((1 && (uint1 (dec_inst_xinstfetch[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_xinstfetch[0].3 eq (uint3 4 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_xinstfetch[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
                          inst_id_159[0] = 8
                          inst_lat_157[0] = 1
                        }
                        else {
                          dec_inst_bsync = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv__', UInt(47))]))) {
                            dec_inst_bsync[x] = decode_inst_158[0]
                          }

                          if (((1 && (uint1 (dec_inst_bsync[0].4 eq (uint1 0 : UInt(1))) : UInt(1))) && (uint1 (dec_inst_bsync[0].3 eq (uint3 5 : UInt(3))) : UInt(1))) && (uint1 (dec_inst_bsync[0].2 eq (uint2 3 : UInt(2))) : UInt(1))) {
                            inst_id_159[0] = 9
                            inst_lat_157[0] = 1
                          }
                          else {
                            assert_cond_170 = compute((1,), UInt(1)) {
                              assert_cond_170[x] = 0
                            }

                            if (assert_cond_170[0] eq 0) {
                              print(decode_inst_158[0], _cur_address_149[0], 

Assertion failed {instruction.py:294,instruction.py:265,hcl_ext.py:727}: 

ce0.cf.UC.decode Invalid instruction (%d) at address %d


)
                              while ((assert_cond_170[0] eq 0)) {
                                assert_cond_170[0] = 0
                              }
                            }
                            inst_id_159[0] = 10
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (((0 || (uint1 (inst_lat_157[0] le 1) : UInt(1))) || (uint1 (latstalled_31[0] eq 1) : UInt(1))) ne 0) {
          execute_inst_171 = compute((1,), UInt(64)) {
            execute_inst_171[x] = inst_150[0]
          }

          if (inst_id_159[0] eq 0) {
            exe_inst_ce0.cf.UC_nop = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('count', UInt(11)), ('__rsrv__', UInt(36))]))) {
              exe_inst_ce0.cf.UC_nop[x] = execute_inst_171[0]
            }

            if (nop_count[0] lt exe_inst_ce0.cf.UC_nop[0].5) {
              nop_count[0] = (nop_count[0] + 1)
              tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
              flags_stall_23[0] = 1
              flags_stalled_24[0] = 1
              flags_break_25[0] = 1
            }
            else {
              nop_count[0] = 0
              flags_break_25[0] = 1
            }
          }
          else {
            if (inst_id_159[0] eq 1) {
              exe_inst_ce0.cf.UC_ifetch = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('bundle', UInt(11)), ('__rsrv__', UInt(36))]))) {
                exe_inst_ce0.cf.UC_ifetch[x] = execute_inst_171[0]
              }

              tiles_active = compute((1,), UInt(1)) {
                tiles_active[x] = 0
              }

              if (flags_active_42[0] ne 0) {
                tiles_active[0] = 1
              }
              if (tiles_active[0] ne 0) {
                tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
                flags_stall_23[0] = 1
                flags_stalled_24[0] = 1
                flags_break_25[0] = 1
              }
              else {
                count_175 = compute((1,), UInt(32)) {
                  count_175[x] = 16
                }

                src_addr_176 = compute((1,), Int(43)) {
                  src_addr_176[x] = (exe_inst_ce0.cf.UC_ifetch[0].5 * 16)
                }

                dst_addr_177 = compute((1,), UInt(32)) {
                  dst_addr_177[x] = 0
                }

                _addr_178 = compute((1,), Int(43)) {
                  _addr_178[x] = src_addr_176[0]
                }

                assert_cond_179 = compute((1,), UInt(1)) {
                  assert_cond_179[x] = ((_addr_178[0] + count_175[0]) le 32768)
                }

                if (assert_cond_179[0] eq 0) {
                  print(_addr_178[0], (_addr_178[0] + count_175[0]), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:277,cetiles.py:156,cetiles.py:30,cetiles.py:156,tile.py:240,mem.py:172,mem.py:106,hcl_ext.py:727}: xinstq Mem.copyto exceeds memory size: addr=%d+size=%d > 32768

)
                  while ((assert_cond_179[0] eq 0)) {
                    assert_cond_179[0] = 0
                  }
                }
                copyN_32 = compute((count_175[0],), None) {
                  instq.alloc_c[(dst_addr_177[0] + i)] = xinstq.alloc_c[(src_addr_176[0] + i)]
                }

                uc_start_delay[0] = 5
              }
            }
            else {
              if (inst_id_159[0] eq 2) {
                exe_inst_ce0.cf.UC_bload = compute((1,), Struct(OrderedDict([('rfaddr', UInt(9)), ('colnum', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                  exe_inst_ce0.cf.UC_bload[x] = execute_inst_171[0]
                }

                sa_181 = compute((1,), UInt(32)) {
                  sa_181[x] = exe_inst_ce0.cf.UC_bload[0].5
                }

                sa_181[0] = (sa_181[0] << 13)
                count_182 = compute((1,), UInt(32)) {
                  count_182[x] = 64
                }

                src_addr_183 = compute((1,), Int(35)) {
                  src_addr_183[x] = (sa_181[0] + (exe_inst_ce0.cf.UC_bload[0].1 * 512))
                }

                dst_addr_184 = compute((1,), UInt(32)) {
                  dst_addr_184[x] = 0
                }

                _addr_185 = compute((1,), Int(35)) {
                  _addr_185[x] = src_addr_183[0]
                }

                assert_cond_186 = compute((1,), UInt(1)) {
                  assert_cond_186[x] = ((_addr_185[0] + count_182[0]) le 33554432)
                }

                if (assert_cond_186[0] eq 0) {
                  print(_addr_185[0], (_addr_185[0] + count_182[0]), 

Assertion failed {instruction.py:318,cfetch.py:294,cetiles.py:162,cetiles.py:30,cetiles.py:162,tile.py:245,levelinfo.py:72,mem.py:172,mem.py:106,hcl_ext.py:727}: SPAD Mem.copyto exceeds memory size: addr=%d+size=%d > 33554432

)
                  while ((assert_cond_186[0] eq 0)) {
                    assert_cond_186[0] = 0
                  }
                }
                copyN_33 = compute((count_182[0],), None) {
                  twpwrs.alloc_c[exe_inst_ce0.cf.UC_bload[0].0, (dst_addr_184[0] + i)] = SPAD.alloc_c[(src_addr_183[0] + i)]
                }

              }
              else {
                if (inst_id_159[0] eq 3) {
                  exe_inst_ce0.cf.UC_bones = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('colnum', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                    exe_inst_ce0.cf.UC_bones[x] = execute_inst_171[0]
                  }

                  sa_188 = compute((1,), UInt(32)) {
                    sa_188[x] = exe_inst_ce0.cf.UC_bones[0].5
                  }

                  sa_188[0] = (sa_188[0] << 13)
                  count_189 = compute((1,), UInt(32)) {
                    count_189[x] = 64
                  }

                  src_addr_190 = compute((1,), Int(35)) {
                    src_addr_190[x] = (sa_188[0] + (exe_inst_ce0.cf.UC_bones[0].1 * 512))
                  }

                  dst_addr_191 = compute((1,), UInt(32)) {
                    dst_addr_191[x] = 0
                  }

                  _addr_192 = compute((1,), Int(35)) {
                    _addr_192[x] = src_addr_190[0]
                  }

                  assert_cond_193 = compute((1,), UInt(1)) {
                    assert_cond_193[x] = ((_addr_192[0] + count_189[0]) le 33554432)
                  }

                  if (assert_cond_193[0] eq 0) {
                    print(_addr_192[0], (_addr_192[0] + count_189[0]), 

Assertion failed {instruction.py:318,cfetch.py:307,cetiles.py:165,cetiles.py:30,cetiles.py:165,tile.py:248,levelinfo.py:90,mem.py:172,mem.py:106,hcl_ext.py:727}: SPAD Mem.copyto exceeds memory size: addr=%d+size=%d > 33554432

)
                    while ((assert_cond_193[0] eq 0)) {
                      assert_cond_193[0] = 0
                    }
                  }
                  copyN_34 = compute((count_189[0],), None) {
                    mone.alloc_c[(dst_addr_191[0] + i)] = SPAD.alloc_c[(src_addr_190[0] + i)]
                  }

                }
                else {
                  if (inst_id_159[0] eq 4) {
                    exe_inst_ce0.cf.UC_cload = compute((1,), Struct(OrderedDict([('rfaddr', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                      exe_inst_ce0.cf.UC_cload[x] = execute_inst_171[0]
                    }

                    sa_195 = compute((1,), UInt(32)) {
                      sa_195[x] = exe_inst_ce0.cf.UC_cload[0].5
                    }

                    sa_195[0] = (sa_195[0] << 13)
                    rfaddr_196 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_196[x] = exe_inst_ce0.cf.UC_cload[0].0
                    }

                    bv_197 = compute((1,), UInt(3)) {
                      bv_197[x] = (uint2 rfaddr_196[0].1 : UInt(2))
                    }

                    rv_198 = compute((1,), UInt(8)) {
                      rv_198[x] = (uint7 rfaddr_196[0].0 : UInt(7))
                    }

                    count_199 = compute((1,), UInt(32)) {
                      count_199[x] = 8192
                    }

                    src_addr_200 = compute((1,), Int(34)) {
                      src_addr_200[x] = (sa_195[0] + 0)
                    }

                    dst_addr_201 = compute((1,), UInt(32)) {
                      dst_addr_201[x] = 0
                    }

                    _addr_202 = compute((1,), Int(34)) {
                      _addr_202[x] = src_addr_200[0]
                    }

                    assert_cond_203 = compute((1,), UInt(1)) {
                      assert_cond_203[x] = ((_addr_202[0] + count_199[0]) le 33554432)
                    }

                    if (assert_cond_203[0] eq 0) {
                      print(_addr_202[0], (_addr_202[0] + count_199[0]), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:317,cetiles.py:159,cetiles.py:30,cetiles.py:159,tile.py:252,mem.py:172,mem.py:106,hcl_ext.py:727}: SPAD Mem.copyto exceeds memory size: addr=%d+size=%d > 33554432

)
                      while ((assert_cond_203[0] eq 0)) {
                        assert_cond_203[0] = 0
                      }
                    }
                    copyN_35 = compute((count_199[0],), None) {
                      RFfoo.alloc_c[bv_197[0], rv_198[0], (dst_addr_201[0] + i)] = SPAD.alloc_c[(src_addr_200[0] + i)]
                    }

                  }
                  else {
                    if (inst_id_159[0] eq 5) {
                      exe_inst_ce0.cf.UC_cstore = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('spadaddr', UInt(11)), ('__rsrv__', UInt(36))]))) {
                        exe_inst_ce0.cf.UC_cstore[x] = execute_inst_171[0]
                      }

                      if (cstore_cycle[0] eq 0) {
                        cstore_cycle[0] = 1
                        cstore_valid[0] = 0
                        sa_205 = compute((1,), UInt(32)) {
                          sa_205[x] = exe_inst_ce0.cf.UC_cstore[0].5
                        }

                        sa_205[0] = (sa_205[0] << 13)
                        cstore_spadaddr[0] = sa_205[0]
                        tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
                        flags_stall_23[0] = 1
                        flags_stalled_24[0] = 1
                        flags_break_25[0] = 1
                      }
                      else {
                        if (cstore_cycle[0] eq 1) {
                          if (cstore_valid[0] eq 1) {
                            cstore_cycle[0] = 2
                          }
                          tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
                          flags_stall_23[0] = 1
                          flags_stalled_24[0] = 1
                          flags_break_25[0] = 1
                        }
                        else {
                          if (cstore_cycle[0] ne 3) {
                            cstore_cycle[0] = (cstore_cycle[0] + 1)
                            tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
                            flags_stall_23[0] = 1
                            flags_stalled_24[0] = 1
                            flags_break_25[0] = 1
                          }
                          else {
                            cstore_cycle[0] = 0
                            cstore_valid[0] = 0
                          }
                        }
                      }
                    }
                    else {
                      if (inst_id_159[0] eq 6) {
                        exe_inst_ce0.cf.UC_cexit = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('__rsrv__', UInt(36))]))) {
                          exe_inst_ce0.cf.UC_cexit[x] = execute_inst_171[0]
                        }

                        flags_halt_22[0] = 1
                        flags_active_21[0] = 0
                        flags_break_25[0] = 1
                      }
                      else {
                        if (inst_id_159[0] eq 7) {
                          exe_inst_ce0.cf.UC_csyncm = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('minstqaddr', UInt(15)), ('__rsrv__', UInt(21))]))) {
                            exe_inst_ce0.cf.UC_csyncm[x] = execute_inst_171[0]
                          }

                          if (tele_inst_count[0] le exe_inst_ce0.cf.UC_csyncm[0].6) {
                            tele_stall_count_33[0] = (tele_stall_count_33[0] + 1)
                            flags_stall_23[0] = 1
                            flags_stalled_24[0] = 1
                            flags_break_25[0] = 1
                          }
                          else {
                          }
                        }
                        else {
                          if (inst_id_159[0] eq 8) {
                            exe_inst_ce0.cf.UC_xinstfetch = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv17__', UInt(11)), ('xinstqaddr', UInt(12)), ('hbmaddr', UInt(21)), ('__rsrv__', UInt(3))]))) {
                              exe_inst_ce0.cf.UC_xinstfetch[x] = execute_inst_171[0]
                            }

                            read_addr_209 = compute((1,), UInt(32)) {
                              read_addr_209[x] = 3
                            }

                            _addr_210 = compute((1,), UInt(32)) {
                              _addr_210[x] = read_addr_209[0]
                            }

                            assert_cond_211 = compute((1,), UInt(1)) {
                              assert_cond_211[x] = ((_addr_210[0] + 1) le 10)
                            }

                            if (assert_cond_211[0] eq 0) {
                              print(_addr_210[0], (_addr_210[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:405,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: Sysreg Mem.read exceeds memory size: addr=%d+size=%d > 10

)
                              while ((assert_cond_211[0] eq 0)) {
                                assert_cond_211[0] = 0
                              }
                            }
                            Mem.read_c_36 = compute((1,), UInt(64)) {
                              Mem.read_c_36[i] = sysreg[(read_addr_209[0] + i)]
                            }

                            count_212 = compute((1,), UInt(32)) {
                              count_212[x] = 2048
                            }

                            src_addr_213 = compute((1,), Int(86)) {
                              src_addr_213[x] = (Mem.read_c_36[0] + ((exe_inst_ce0.cf.UC_xinstfetch[0].7 * 2048) * 4))
                            }

                            dst_addr_214 = compute((1,), Int(44)) {
                              dst_addr_214[x] = (exe_inst_ce0.cf.UC_xinstfetch[0].6 * 2048)
                            }

                            _addr_215 = compute((1,), Int(44)) {
                              _addr_215[x] = dst_addr_214[0]
                            }

                            assert_cond_216 = compute((1,), UInt(1)) {
                              assert_cond_216[x] = ((_addr_215[0] + count_212[0]) le 32768)
                            }

                            if (assert_cond_216[0] eq 0) {
                              print(_addr_215[0], (_addr_215[0] + count_212[0]), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:410,mem.py:174,mem.py:106,hcl_ext.py:727}: xinstq Mem.copyto exceeds memory size: addr=%d+size=%d > 32768

)
                              while ((assert_cond_216[0] eq 0)) {
                                assert_cond_216[0] = 0
                              }
                            }
                            tmp = compute((1,), UInt(128)) {
                              tmp[x] = 0
                            }

                            assert_cond_218 = compute((1,), UInt(1)) {
                              assert_cond_218[x] = ((src_addr_213[0] + (count_212[0] * 4)) le 33554432)
                            }

                            if (assert_cond_218[0] eq 0) {
                              print((src_addr_213[0] + (count_212[0] * 4)), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:410,mem.py:178,hcl_ext.py:271,hcl_ext.py:727}: copyN: hbm index (%d) > size (33554432)


)
                              while ((assert_cond_218[0] eq 0)) {
                                assert_cond_218[0] = 0
                              }
                            }
                            assert_cond_219 = compute((1,), UInt(1)) {
                              assert_cond_219[x] = ((dst_addr_214[0] + count_212[0]) le 32768)
                            }

                            if (assert_cond_219[0] eq 0) {
                              print((dst_addr_214[0] + count_212[0]), 

Assertion failed {instruction.py:320,instruction.py:318,cfetch.py:410,mem.py:178,hcl_ext.py:274,hcl_ext.py:727}: copyN: xinstq.alloc_c index (%d) > size (32768)


)
                              while ((assert_cond_219[0] eq 0)) {
                                assert_cond_219[0] = 0
                              }
                            }
                            copyN_37 = compute((count_212[0],), None) {
                              tmp[0] = 0
                              tmp[0] = ((tmp[0] << 32) | hbm[((src_addr_213[0] + (i * 4)) + 0)])
                              tmp[0] = ((tmp[0] << 32) | hbm[((src_addr_213[0] + (i * 4)) + 1)])
                              tmp[0] = ((tmp[0] << 32) | hbm[((src_addr_213[0] + (i * 4)) + 2)])
                              tmp[0] = ((tmp[0] << 32) | hbm[((src_addr_213[0] + (i * 4)) + 3)])
                              xinstq.alloc_c[(dst_addr_214[0] + i)] = tmp[0]
                            }

                          }
                          else {
                            if (inst_id_159[0] eq 9) {
                              exe_inst_ce0.cf.UC_bsync = compute((1,), Struct(OrderedDict([('__rsrv0__', UInt(9)), ('__rsrv9__', UInt(2)), ('datainmode', UInt(2)), ('cfetchmode', UInt(3)), ('wren', UInt(1)), ('__rsrv__', UInt(47))]))) {
                                exe_inst_ce0.cf.UC_bsync[x] = execute_inst_171[0]
                              }

                            }
                            else {
                              print(0, Invalid instruction : 0x)
                              print(execute_inst_171[0], %016lx)
                              print(0, 
)
                              assert_cond_221 = compute((1,), UInt(1)) {
                                assert_cond_221[x] = 0
                              }

                              if (assert_cond_221[0] eq 0) {
                                print(0, 

Assertion failed {instruction.py:320,instruction.py:309,hcl_ext.py:727}: ce0.cf.UC.decode Invalid instruction

)
                                while ((assert_cond_221[0] eq 0)) {
                                  assert_cond_221[0] = 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          latstalled_31[0] = 0
          if (inst_lat_157[0] ne 0) {
            flags_break_25[0] = 1
          }
          if (flags_stall_23[0] eq 0) {
            tele_inst_count_32[0] = (tele_inst_count_32[0] + 1)
            inst_addr_28[0] = inst_naddr_29[0]
            flags_stalled_24[0] = 0
          }
        }
        else {
          latency_count_30[0] = (inst_lat_157[0] - 2)
          tele_latstall_count_34[0] = (tele_latstall_count_34[0] + 1)
          latstalled_31[0] = 1
          flags_break_25[0] = 1
        }
      }
      else {
        assert_cond_222 = compute((1,), UInt(1)) {
          assert_cond_222[x] = (latstalled_31[0] eq 1)
        }

        if (assert_cond_222[0] eq 0) {
          print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,cfetch.py:204,uController.py:213,hcl_ext.py:727}: latency countdown but not latstalled?

)
          while ((assert_cond_222[0] eq 0)) {
            assert_cond_222[0] = 0
          }
        }
        latency_count_30[0] = (latency_count_30[0] - 1)
        tele_latstall_count_34[0] = (tele_latstall_count_34[0] + 1)
        latstalled_31[0] = 1
        flags_break_25[0] = 1
      }
    }
    if (uc_start_delay[0] eq 0) {
      addr_top = compute((1,), UInt(5)) {
        addr_top[x] = 16
      }

      flags_stall_44[0] = 0
      flags_break_46[0] = 0
      count_stop_47[0] = 0
      addr_stop_48[0] = 0
      while_cont_224 = compute((1,), UInt(1)) {
        while_cont_224[x] = 1
      }

      while ((while_cont_224[0] ne 0)) {
        assert_cond_225 = compute((1,), UInt(1)) {
          assert_cond_225[x] = (((0 || (uint1 (latstalled_52[0] eq 1) : UInt(1))) || (uint1 (latency_count_51[0] eq 0) : UInt(1))) ne 0)
        }

        if (assert_cond_225[0] eq 0) {
          print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:189,uController.py:153,hcl_ext.py:727}: 

)
          while ((assert_cond_225[0] eq 0)) {
            assert_cond_225[0] = 0
          }
        }
        if (latency_count_51[0] eq 0) {
          _cur_address_226 = compute((1,), UInt(5)) {
            _cur_address_226[x] = inst_addr_49[0]
          }

          inst_naddr_50[0] = (inst_addr_49[0] + 1)
          inst_227 = compute((1,), UInt(128)) {
            inst_227[x] = 0
          }

          read_addr_228 = compute((1,), Int(33)) {
            read_addr_228[x] = (inst_addr_49[0] + 0)
          }

          _addr_229 = compute((1,), Int(33)) {
            _addr_229[x] = read_addr_228[0]
          }

          assert_cond_230 = compute((1,), UInt(1)) {
            assert_cond_230[x] = ((_addr_229[0] + 1) le 16)
          }

          if (assert_cond_230[0] eq 0) {
            print(_addr_229[0], (_addr_229[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:189,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: instq Mem.read exceeds memory size: addr=%d+size=%d > 16

)
            while ((assert_cond_230[0] eq 0)) {
              assert_cond_230[0] = 0
            }
          }
          Mem.read_c_38 = compute((1,), UInt(128)) {
            Mem.read_c_38[i] = instq.alloc_c[(read_addr_228[0] + i)]
          }

          inst_227[0] = ((inst_227[0] << 128) | Mem.read_c_38[0])
          inst_lat_231 = compute((1,), UInt(32)) {
            inst_lat_231[x] = 0
          }

          decode_inst_232 = compute((1,), UInt(128)) {
            decode_inst_232[x] = inst_227[0]
          }

          inst_id_233 = compute((1,), UInt(16)) {
            inst_id_233[x] = 0
          }

          dec_inst_padd = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
            dec_inst_padd[x] = decode_inst_232[0]
          }

          if (1 && (uint1 (dec_inst_padd[0].0 eq (uint6 4 : UInt(6))) : UInt(1))) {
            inst_id_233[0] = 0
            inst_lat_231[0] = 1
          }
          else {
            dec_inst_pmul = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
              dec_inst_pmul[x] = decode_inst_232[0]
            }

            if (1 && (uint1 (dec_inst_pmul[0].0 eq (uint6 5 : UInt(6))) : UInt(1))) {
              inst_id_233[0] = 1
              inst_lat_231[0] = 1
            }
            else {
              dec_inst_pmuli = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('imm', UInt(32)), ('q', UInt(32)), ('__rsrv__', UInt(39))]))) {
                dec_inst_pmuli[x] = decode_inst_232[0]
              }

              if (1 && (uint1 (dec_inst_pmuli[0].0 eq (uint6 21 : UInt(6))) : UInt(1))) {
                inst_id_233[0] = 2
                inst_lat_231[0] = 1
              }
              else {
                dec_inst_pmac = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                  dec_inst_pmac[x] = decode_inst_232[0]
                }

                if (1 && (uint1 (dec_inst_pmac[0].0 eq (uint6 6 : UInt(6))) : UInt(1))) {
                  inst_id_233[0] = 3
                  inst_lat_231[0] = 1
                }
                else {
                  dec_inst_pmaci = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('imm', UInt(32)), ('q', UInt(32)), ('__rsrv__', UInt(39))]))) {
                    dec_inst_pmaci[x] = decode_inst_232[0]
                  }

                  if (1 && (uint1 (dec_inst_pmaci[0].0 eq (uint6 22 : UInt(6))) : UInt(1))) {
                    inst_id_233[0] = 4
                    inst_lat_231[0] = 1
                  }
                  else {
                    dec_inst_ntt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('dsttop', UInt(9)), ('dstbot', UInt(9)), ('srctop', UInt(9)), ('srcbot', UInt(9)), ('twrfmodsel', UInt(6)), ('twrfrdaddr', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('dsttw', UInt(9)), ('srctw', UInt(9)), ('srcfinalstagetw', UInt(9)), ('stagenum', UInt(5)), ('blocknum', UInt(3)), ('polyblocknum', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                      dec_inst_ntt[x] = decode_inst_232[0]
                    }

                    if (1 && (uint1 (dec_inst_ntt[0].0 eq (uint6 7 : UInt(6))) : UInt(1))) {
                      inst_id_233[0] = 5
                      inst_lat_231[0] = 1
                    }
                    else {
                      dec_inst_intt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('dsttop', UInt(9)), ('dstbot', UInt(9)), ('srctop', UInt(9)), ('srcbot', UInt(9)), ('__rsrv43__', UInt(6)), ('__rsrv49__', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('__rsrv89__', UInt(9)), ('srctw', UInt(9)), ('__rsrv107__', UInt(9)), ('stagenum', UInt(5)), ('__rsrv121__', UInt(3)), ('__rsrv124__', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                        dec_inst_intt[x] = decode_inst_232[0]
                      }

                      if (1 && (uint1 (dec_inst_intt[0].0 eq (uint6 15 : UInt(6))) : UInt(1))) {
                        inst_id_233[0] = 6
                        inst_lat_231[0] = 1
                      }
                      else {
                        dec_inst_twintt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('__rsrv7__', UInt(9)), ('__rsrv16__', UInt(9)), ('__rsrv25__', UInt(9)), ('__rsrv34__', UInt(9)), ('twrfmodsel', UInt(6)), ('twrfrdaddr', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('dsttw', UInt(9)), ('srctw', UInt(9)), ('__rsrv107__', UInt(9)), ('stagenum', UInt(5)), ('blocknum', UInt(3)), ('polyblocknum', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                          dec_inst_twintt[x] = decode_inst_232[0]
                        }

                        if (1 && (uint1 (dec_inst_twintt[0].0 eq (uint6 16 : UInt(6))) : UInt(1))) {
                          inst_id_233[0] = 7
                          inst_lat_231[0] = 1
                        }
                        else {
                          dec_inst_psub = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                            dec_inst_psub[x] = decode_inst_232[0]
                          }

                          if (1 && (uint1 (dec_inst_psub[0].0 eq (uint6 4 : UInt(6))) : UInt(1))) {
                            inst_id_233[0] = 8
                            inst_lat_231[0] = 1
                          }
                          else {
                            dec_inst_nop_243 = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('count', UInt(10)), ('__rsrv__', UInt(111))]))) {
                              dec_inst_nop_243[x] = decode_inst_232[0]
                            }

                            if (1 && (uint1 (dec_inst_nop_243[0].0 eq (uint6 0 : UInt(6))) : UInt(1))) {
                              inst_id_233[0] = 9
                              inst_lat_231[0] = 1
                            }
                            else {
                              dec_inst_cstore_244 = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(33)), ('addr', UInt(9)), ('__rsrv__', UInt(80))]))) {
                                dec_inst_cstore_244[x] = decode_inst_232[0]
                              }

                              if (1 && (uint1 (dec_inst_cstore_244[0].0 eq (uint6 9 : UInt(6))) : UInt(1))) {
                                inst_id_233[0] = 10
                                inst_lat_231[0] = 1
                              }
                              else {
                                dec_inst_move = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('__rsrv__', UInt(103))]))) {
                                  dec_inst_move[x] = decode_inst_232[0]
                                }

                                if (1 && (uint1 (dec_inst_move[0].0 eq (uint6 10 : UInt(6))) : UInt(1))) {
                                  inst_id_233[0] = 11
                                  inst_lat_231[0] = 1
                                }
                                else {
                                  assert_cond_246 = compute((1,), UInt(1)) {
                                    assert_cond_246[x] = 0
                                  }

                                  if (assert_cond_246[0] eq 0) {
                                    print(decode_inst_232[0], _cur_address_226[0], 

Assertion failed {instruction.py:294,instruction.py:265,hcl_ext.py:727}: 

ce0.cetiles.Mtile.UC.decode Invalid instruction (%d) at address %d


)
                                    while ((assert_cond_246[0] eq 0)) {
                                      assert_cond_246[0] = 0
                                    }
                                  }
                                  inst_id_233[0] = 12
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (((0 || (uint1 (inst_lat_231[0] le 1) : UInt(1))) || (uint1 (latstalled_52[0] eq 1) : UInt(1))) ne 0) {
            execute_inst_247 = compute((1,), UInt(128)) {
              execute_inst_247[x] = inst_227[0]
            }

            if (inst_id_233[0] eq 0) {
              exe_inst_ce0.cetiles.Mtile.UC_padd = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                exe_inst_ce0.cetiles.Mtile.UC_padd[x] = execute_inst_247[0]
              }

              rfaddr_249 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                rfaddr_249[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].3
              }

              bv_250 = compute((1,), UInt(3)) {
                bv_250[x] = (uint2 rfaddr_249[0].1 : UInt(2))
              }

              rv_251 = compute((1,), UInt(8)) {
                rv_251[x] = (uint7 rfaddr_249[0].0 : UInt(7))
              }

              rfaddr_252 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                rfaddr_252[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].4
              }

              bv_253 = compute((1,), UInt(3)) {
                bv_253[x] = (uint2 rfaddr_252[0].1 : UInt(2))
              }

              rv_254 = compute((1,), UInt(8)) {
                rv_254[x] = (uint7 rfaddr_252[0].0 : UInt(7))
              }

              assert_cond_255 = compute((1,), UInt(1)) {
                assert_cond_255[x] = (bv_250[0] ne bv_253[0])
              }

              if (assert_cond_255[0] eq 0) {
                print(0, 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:189,uController.py:172,instruction.py:321,instruction.py:318,tile.py:352,tile.py:342,hcl_ext.py:727}: padd read bank conflict

)
                while ((assert_cond_255[0] eq 0)) {
                  assert_cond_255[0] = 0
                }
              }
              rfaddr_256 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                rfaddr_256[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].2
              }

              bv_257 = compute((1,), UInt(3)) {
                bv_257[x] = (uint2 rfaddr_256[0].1 : UInt(2))
              }

              rv_258 = compute((1,), UInt(8)) {
                rv_258[x] = (uint7 rfaddr_256[0].0 : UInt(7))
              }

              rfaddr_259 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                rfaddr_259[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].3
              }

              bv_260 = compute((1,), UInt(3)) {
                bv_260[x] = (uint2 rfaddr_259[0].1 : UInt(2))
              }

              rv_261 = compute((1,), UInt(8)) {
                rv_261[x] = (uint7 rfaddr_259[0].0 : UInt(7))
              }

              rfaddr_262 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                rfaddr_262[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].4
              }

              bv_263 = compute((1,), UInt(3)) {
                bv_263[x] = (uint2 rfaddr_262[0].1 : UInt(2))
              }

              rv_264 = compute((1,), UInt(8)) {
                rv_264[x] = (uint7 rfaddr_262[0].0 : UInt(7))
              }

              bflyfn = compute((8192,), None) {
                _a = compute((1,), UInt(64)) {
                  _a[x] = RFfoo.alloc_c[bv_260[0], rv_261[0], i]
                }

                _b = compute((1,), UInt(64)) {
                  _b[x] = RFfoo.alloc_c[bv_263[0], rv_264[0], i]
                }

                _w = compute((1,), UInt(64)) {
                  _w[x] = 0
                }

                _q = compute((1,), UInt(64)) {
                  _q[x] = exe_inst_ce0.cetiles.Mtile.UC_padd[0].5
                }

                RFfoo.alloc_c[bv_257[0], rv_258[0], i] = ((_a[0] + _b[0]) % _q[0])
              }

            }
            else {
              if (inst_id_233[0] eq 1) {
                exe_inst_ce0.cetiles.Mtile.UC_pmul = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                  exe_inst_ce0.cetiles.Mtile.UC_pmul[x] = execute_inst_247[0]
                }

                rfaddr_270 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                  rfaddr_270[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].4
                }

                bv_271 = compute((1,), UInt(3)) {
                  bv_271[x] = (uint2 rfaddr_270[0].1 : UInt(2))
                }

                rv_272 = compute((1,), UInt(8)) {
                  rv_272[x] = (uint7 rfaddr_270[0].0 : UInt(7))
                }

                rfaddr_273 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                  rfaddr_273[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].3
                }

                bv_274 = compute((1,), UInt(3)) {
                  bv_274[x] = (uint2 rfaddr_273[0].1 : UInt(2))
                }

                rv_275 = compute((1,), UInt(8)) {
                  rv_275[x] = (uint7 rfaddr_273[0].0 : UInt(7))
                }

                assert_cond_276 = compute((1,), UInt(1)) {
                  assert_cond_276[x] = (bv_271[0] ne bv_274[0])
                }

                if (assert_cond_276[0] eq 0) {
                  print(0, 

Assertion failed {hcl_ext.py:865,hcl_ext.py:855,tile.py:189,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,tile.py:363,tile.py:342,hcl_ext.py:727}: pmul read bank conflict

)
                  while ((assert_cond_276[0] eq 0)) {
                    assert_cond_276[0] = 0
                  }
                }
                rfaddr_277 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                  rfaddr_277[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].2
                }

                bv_278 = compute((1,), UInt(3)) {
                  bv_278[x] = (uint2 rfaddr_277[0].1 : UInt(2))
                }

                rv_279 = compute((1,), UInt(8)) {
                  rv_279[x] = (uint7 rfaddr_277[0].0 : UInt(7))
                }

                rfaddr_280 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                  rfaddr_280[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].3
                }

                bv_281 = compute((1,), UInt(3)) {
                  bv_281[x] = (uint2 rfaddr_280[0].1 : UInt(2))
                }

                rv_282 = compute((1,), UInt(8)) {
                  rv_282[x] = (uint7 rfaddr_280[0].0 : UInt(7))
                }

                rfaddr_283 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                  rfaddr_283[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].4
                }

                bv_284 = compute((1,), UInt(3)) {
                  bv_284[x] = (uint2 rfaddr_283[0].1 : UInt(2))
                }

                rv_285 = compute((1,), UInt(8)) {
                  rv_285[x] = (uint7 rfaddr_283[0].0 : UInt(7))
                }

                bflyfn_40 = compute((8192,), None) {
                  _a_286 = compute((1,), UInt(64)) {
                    _a_286[x] = 0
                  }

                  _b_287 = compute((1,), UInt(64)) {
                    _b_287[x] = RFfoo.alloc_c[bv_284[0], rv_285[0], i]
                  }

                  _w_288 = compute((1,), UInt(64)) {
                    _w_288[x] = RFfoo.alloc_c[bv_281[0], rv_282[0], i]
                  }

                  _q_289 = compute((1,), UInt(64)) {
                    _q_289[x] = exe_inst_ce0.cetiles.Mtile.UC_pmul[0].5
                  }

                  assert_cond_290 = compute((1,), UInt(1)) {
                    assert_cond_290[x] = ((_q_289[0] & 4294967295) eq 1)
                  }

                  if (assert_cond_290[0] eq 0) {
                    print(_q_289[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:365,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:52,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                    while ((assert_cond_290[0] eq 0)) {
                      assert_cond_290[0] = 0
                    }
                  }
                  mont_redc = compute((1,), UInt(128)) {
                    mont_redc[x] = (((((((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32) + (((neg (((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32)) & 4294967295) * _q_289[0])) >> 32) lt _q_289[0]) ? (((((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32) + (((neg (((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32)) & 4294967295) * _q_289[0])) >> 32) : ((((((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32) + (((neg (((_w_288[0] * _b_287[0]) + (((neg (_w_288[0] * _b_287[0])) & 4294967295) * _q_289[0])) >> 32)) & 4294967295) * _q_289[0])) >> 32) - _q_289[0]))
                  }

                  RFfoo.alloc_c[bv_278[0], rv_279[0], i] = mont_redc[0]
                }

              }
              else {
                if (inst_id_233[0] eq 2) {
                  exe_inst_ce0.cetiles.Mtile.UC_pmuli = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('imm', UInt(32)), ('q', UInt(32)), ('__rsrv__', UInt(39))]))) {
                    exe_inst_ce0.cetiles.Mtile.UC_pmuli[x] = execute_inst_247[0]
                  }

                  rfaddr_293 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                    rfaddr_293[x] = exe_inst_ce0.cetiles.Mtile.UC_pmuli[0].2
                  }

                  bv_294 = compute((1,), UInt(3)) {
                    bv_294[x] = (uint2 rfaddr_293[0].1 : UInt(2))
                  }

                  rv_295 = compute((1,), UInt(8)) {
                    rv_295[x] = (uint7 rfaddr_293[0].0 : UInt(7))
                  }

                  rfaddr_296 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                    rfaddr_296[x] = exe_inst_ce0.cetiles.Mtile.UC_pmuli[0].3
                  }

                  bv_297 = compute((1,), UInt(3)) {
                    bv_297[x] = (uint2 rfaddr_296[0].1 : UInt(2))
                  }

                  rv_298 = compute((1,), UInt(8)) {
                    rv_298[x] = (uint7 rfaddr_296[0].0 : UInt(7))
                  }

                  bflyfn_41 = compute((8192,), None) {
                    _a_299 = compute((1,), UInt(64)) {
                      _a_299[x] = 0
                    }

                    _b_300 = compute((1,), UInt(64)) {
                      _b_300[x] = exe_inst_ce0.cetiles.Mtile.UC_pmuli[0].4
                    }

                    _w_301 = compute((1,), UInt(64)) {
                      _w_301[x] = RFfoo.alloc_c[bv_297[0], rv_298[0], i]
                    }

                    _q_302 = compute((1,), UInt(64)) {
                      _q_302[x] = exe_inst_ce0.cetiles.Mtile.UC_pmuli[0].5
                    }

                    assert_cond_303 = compute((1,), UInt(1)) {
                      assert_cond_303[x] = ((_q_302[0] & 4294967295) eq 1)
                    }

                    if (assert_cond_303[0] eq 0) {
                      print(_q_302[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:375,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:52,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                      while ((assert_cond_303[0] eq 0)) {
                        assert_cond_303[0] = 0
                      }
                    }
                    mont_redc_304 = compute((1,), UInt(128)) {
                      mont_redc_304[x] = (((((((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32) + (((neg (((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32)) & 4294967295) * _q_302[0])) >> 32) lt _q_302[0]) ? (((((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32) + (((neg (((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32)) & 4294967295) * _q_302[0])) >> 32) : ((((((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32) + (((neg (((_w_301[0] * _b_300[0]) + (((neg (_w_301[0] * _b_300[0])) & 4294967295) * _q_302[0])) >> 32)) & 4294967295) * _q_302[0])) >> 32) - _q_302[0]))
                    }

                    RFfoo.alloc_c[bv_294[0], rv_295[0], i] = mont_redc_304[0]
                  }

                }
                else {
                  if (inst_id_233[0] eq 3) {
                    exe_inst_ce0.cetiles.Mtile.UC_pmac = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                      exe_inst_ce0.cetiles.Mtile.UC_pmac[x] = execute_inst_247[0]
                    }

                    rfaddr_306 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_306[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].2
                    }

                    bv_307 = compute((1,), UInt(3)) {
                      bv_307[x] = (uint2 rfaddr_306[0].1 : UInt(2))
                    }

                    rv_308 = compute((1,), UInt(8)) {
                      rv_308[x] = (uint7 rfaddr_306[0].0 : UInt(7))
                    }

                    rfaddr_309 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_309[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].4
                    }

                    bv_310 = compute((1,), UInt(3)) {
                      bv_310[x] = (uint2 rfaddr_309[0].1 : UInt(2))
                    }

                    rv_311 = compute((1,), UInt(8)) {
                      rv_311[x] = (uint7 rfaddr_309[0].0 : UInt(7))
                    }

                    assert_cond_312 = compute((1,), UInt(1)) {
                      assert_cond_312[x] = (bv_307[0] ne bv_310[0])
                    }

                    if (assert_cond_312[0] eq 0) {
                      print(0, 

Assertion failed {tile.py:189,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,tile.py:384,tile.py:342,hcl_ext.py:727}: pmac read bank conflict

)
                      while ((assert_cond_312[0] eq 0)) {
                        assert_cond_312[0] = 0
                      }
                    }
                    rfaddr_313 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_313[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].3
                    }

                    bv_314 = compute((1,), UInt(3)) {
                      bv_314[x] = (uint2 rfaddr_313[0].1 : UInt(2))
                    }

                    rv_315 = compute((1,), UInt(8)) {
                      rv_315[x] = (uint7 rfaddr_313[0].0 : UInt(7))
                    }

                    tmp_assert = compute((1,), UInt(1)) {
                      tmp_assert[x] = 1
                    }

                    assert_cond_317 = compute((1,), UInt(1)) {
                      assert_cond_317[x] = (((1 && (uint1 (bv_314[0] ne bv_307[0]) : UInt(1))) && (uint1 (bv_314[0] ne bv_310[0]) : UInt(1))) eq 1)
                    }

                    if (assert_cond_317[0] eq 0) {
                      print(0, 

Assertion failed {tile.py:189,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,tile.py:384,tile.py:348,hcl_ext.py:727}: pmac input bank conflict

)
                      while ((assert_cond_317[0] eq 0)) {
                        assert_cond_317[0] = 0
                      }
                    }
                    rfaddr_318 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_318[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].2
                    }

                    bv_319 = compute((1,), UInt(3)) {
                      bv_319[x] = (uint2 rfaddr_318[0].1 : UInt(2))
                    }

                    rv_320 = compute((1,), UInt(8)) {
                      rv_320[x] = (uint7 rfaddr_318[0].0 : UInt(7))
                    }

                    rfaddr_321 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_321[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].2
                    }

                    bv_322 = compute((1,), UInt(3)) {
                      bv_322[x] = (uint2 rfaddr_321[0].1 : UInt(2))
                    }

                    rv_323 = compute((1,), UInt(8)) {
                      rv_323[x] = (uint7 rfaddr_321[0].0 : UInt(7))
                    }

                    rfaddr_324 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_324[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].3
                    }

                    bv_325 = compute((1,), UInt(3)) {
                      bv_325[x] = (uint2 rfaddr_324[0].1 : UInt(2))
                    }

                    rv_326 = compute((1,), UInt(8)) {
                      rv_326[x] = (uint7 rfaddr_324[0].0 : UInt(7))
                    }

                    rfaddr_327 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                      rfaddr_327[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].4
                    }

                    bv_328 = compute((1,), UInt(3)) {
                      bv_328[x] = (uint2 rfaddr_327[0].1 : UInt(2))
                    }

                    rv_329 = compute((1,), UInt(8)) {
                      rv_329[x] = (uint7 rfaddr_327[0].0 : UInt(7))
                    }

                    bflyfn_42 = compute((8192,), None) {
                      _a_330 = compute((1,), UInt(64)) {
                        _a_330[x] = RFfoo.alloc_c[bv_322[0], rv_323[0], i]
                      }

                      _b_331 = compute((1,), UInt(64)) {
                        _b_331[x] = RFfoo.alloc_c[bv_328[0], rv_329[0], i]
                      }

                      _w_332 = compute((1,), UInt(64)) {
                        _w_332[x] = RFfoo.alloc_c[bv_325[0], rv_326[0], i]
                      }

                      _q_333 = compute((1,), UInt(64)) {
                        _q_333[x] = exe_inst_ce0.cetiles.Mtile.UC_pmac[0].5
                      }

                      assert_cond_334 = compute((1,), UInt(1)) {
                        assert_cond_334[x] = ((_q_333[0] & 4294967295) eq 1)
                      }

                      if (assert_cond_334[0] eq 0) {
                        print(_q_333[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:386,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:55,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                        while ((assert_cond_334[0] eq 0)) {
                          assert_cond_334[0] = 0
                        }
                      }
                      mont_redc_335 = compute((1,), UInt(128)) {
                        mont_redc_335[x] = (((((((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32) + (((neg (((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32)) & 4294967295) * _q_333[0])) >> 32) lt _q_333[0]) ? (((((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32) + (((neg (((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32)) & 4294967295) * _q_333[0])) >> 32) : ((((((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32) + (((neg (((_w_332[0] * _b_331[0]) + (((neg (_w_332[0] * _b_331[0])) & 4294967295) * _q_333[0])) >> 32)) & 4294967295) * _q_333[0])) >> 32) - _q_333[0]))
                      }

                      RFfoo.alloc_c[bv_319[0], rv_320[0], i] = ((_a_330[0] + mont_redc_335[0]) % _q_333[0])
                    }

                  }
                  else {
                    if (inst_id_233[0] eq 4) {
                      exe_inst_ce0.cetiles.Mtile.UC_pmaci = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('w', UInt(9)), ('imm', UInt(32)), ('q', UInt(32)), ('__rsrv__', UInt(39))]))) {
                        exe_inst_ce0.cetiles.Mtile.UC_pmaci[x] = execute_inst_247[0]
                      }

                      rfaddr_337 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                        rfaddr_337[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].2
                      }

                      bv_338 = compute((1,), UInt(3)) {
                        bv_338[x] = (uint2 rfaddr_337[0].1 : UInt(2))
                      }

                      rv_339 = compute((1,), UInt(8)) {
                        rv_339[x] = (uint7 rfaddr_337[0].0 : UInt(7))
                      }

                      rfaddr_340 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                        rfaddr_340[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].3
                      }

                      bv_341 = compute((1,), UInt(3)) {
                        bv_341[x] = (uint2 rfaddr_340[0].1 : UInt(2))
                      }

                      rv_342 = compute((1,), UInt(8)) {
                        rv_342[x] = (uint7 rfaddr_340[0].0 : UInt(7))
                      }

                      assert_cond_343 = compute((1,), UInt(1)) {
                        assert_cond_343[x] = (bv_338[0] ne bv_341[0])
                      }

                      if (assert_cond_343[0] eq 0) {
                        print(0, 

Assertion failed {uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,tile.py:395,tile.py:342,hcl_ext.py:727}: pmaci read bank conflict

)
                        while ((assert_cond_343[0] eq 0)) {
                          assert_cond_343[0] = 0
                        }
                      }
                      rfaddr_344 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                        rfaddr_344[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].2
                      }

                      bv_345 = compute((1,), UInt(3)) {
                        bv_345[x] = (uint2 rfaddr_344[0].1 : UInt(2))
                      }

                      rv_346 = compute((1,), UInt(8)) {
                        rv_346[x] = (uint7 rfaddr_344[0].0 : UInt(7))
                      }

                      rfaddr_347 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                        rfaddr_347[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].2
                      }

                      bv_348 = compute((1,), UInt(3)) {
                        bv_348[x] = (uint2 rfaddr_347[0].1 : UInt(2))
                      }

                      rv_349 = compute((1,), UInt(8)) {
                        rv_349[x] = (uint7 rfaddr_347[0].0 : UInt(7))
                      }

                      rfaddr_350 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                        rfaddr_350[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].3
                      }

                      bv_351 = compute((1,), UInt(3)) {
                        bv_351[x] = (uint2 rfaddr_350[0].1 : UInt(2))
                      }

                      rv_352 = compute((1,), UInt(8)) {
                        rv_352[x] = (uint7 rfaddr_350[0].0 : UInt(7))
                      }

                      bflyfn_43 = compute((8192,), None) {
                        _a_353 = compute((1,), UInt(64)) {
                          _a_353[x] = RFfoo.alloc_c[bv_348[0], rv_349[0], i]
                        }

                        _b_354 = compute((1,), UInt(64)) {
                          _b_354[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].4
                        }

                        _w_355 = compute((1,), UInt(64)) {
                          _w_355[x] = RFfoo.alloc_c[bv_351[0], rv_352[0], i]
                        }

                        _q_356 = compute((1,), UInt(64)) {
                          _q_356[x] = exe_inst_ce0.cetiles.Mtile.UC_pmaci[0].5
                        }

                        assert_cond_357 = compute((1,), UInt(1)) {
                          assert_cond_357[x] = ((_q_356[0] & 4294967295) eq 1)
                        }

                        if (assert_cond_357[0] eq 0) {
                          print(_q_356[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:397,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:55,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                          while ((assert_cond_357[0] eq 0)) {
                            assert_cond_357[0] = 0
                          }
                        }
                        mont_redc_358 = compute((1,), UInt(128)) {
                          mont_redc_358[x] = (((((((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32) + (((neg (((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32)) & 4294967295) * _q_356[0])) >> 32) lt _q_356[0]) ? (((((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32) + (((neg (((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32)) & 4294967295) * _q_356[0])) >> 32) : ((((((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32) + (((neg (((_w_355[0] * _b_354[0]) + (((neg (_w_355[0] * _b_354[0])) & 4294967295) * _q_356[0])) >> 32)) & 4294967295) * _q_356[0])) >> 32) - _q_356[0]))
                        }

                        RFfoo.alloc_c[bv_345[0], rv_346[0], i] = ((_a_353[0] + mont_redc_358[0]) % _q_356[0])
                      }

                    }
                    else {
                      if (inst_id_233[0] eq 5) {
                        exe_inst_ce0.cetiles.Mtile.UC_ntt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('dsttop', UInt(9)), ('dstbot', UInt(9)), ('srctop', UInt(9)), ('srcbot', UInt(9)), ('twrfmodsel', UInt(6)), ('twrfrdaddr', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('dsttw', UInt(9)), ('srctw', UInt(9)), ('srcfinalstagetw', UInt(9)), ('stagenum', UInt(5)), ('blocknum', UInt(3)), ('polyblocknum', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                          exe_inst_ce0.cetiles.Mtile.UC_ntt[x] = execute_inst_247[0]
                        }

                        assert_cond_360 = compute((1,), UInt(1)) {
                          assert_cond_360[x] = (flag_ntt[0] eq 0)
                        }

                        if (assert_cond_360[0] eq 0) {
                          print(0, 

Assertion failed {uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,tile.py:446,hcl_ext.py:727}: NTT flag already set?

)
                          while ((assert_cond_360[0] eq 0)) {
                            assert_cond_360[0] = 0
                          }
                        }
                        rfaddr_361 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_361[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].4
                        }

                        bv_362 = compute((1,), UInt(3)) {
                          bv_362[x] = (uint2 rfaddr_361[0].1 : UInt(2))
                        }

                        rv_363 = compute((1,), UInt(8)) {
                          rv_363[x] = (uint7 rfaddr_361[0].0 : UInt(7))
                        }

                        rfaddr_364 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_364[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].5
                        }

                        bv_365 = compute((1,), UInt(3)) {
                          bv_365[x] = (uint2 rfaddr_364[0].1 : UInt(2))
                        }

                        rv_366 = compute((1,), UInt(8)) {
                          rv_366[x] = (uint7 rfaddr_364[0].0 : UInt(7))
                        }

                        assert_cond_367 = compute((1,), UInt(1)) {
                          assert_cond_367[x] = (bv_362[0] ne bv_365[0])
                        }

                        if (assert_cond_367[0] eq 0) {
                          print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,tile.py:447,tile.py:342,hcl_ext.py:727}: ntt read bank conflict

)
                          while ((assert_cond_367[0] eq 0)) {
                            assert_cond_367[0] = 0
                          }
                        }
                        rfaddr_368 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_368[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].11
                        }

                        bv_369 = compute((1,), UInt(3)) {
                          bv_369[x] = (uint2 rfaddr_368[0].1 : UInt(2))
                        }

                        rv_370 = compute((1,), UInt(8)) {
                          rv_370[x] = (uint7 rfaddr_368[0].0 : UInt(7))
                        }

                        tmp_assert_371 = compute((1,), UInt(1)) {
                          tmp_assert_371[x] = 1
                        }

                        assert_cond_372 = compute((1,), UInt(1)) {
                          assert_cond_372[x] = (((1 && (uint1 (bv_369[0] ne bv_362[0]) : UInt(1))) && (uint1 (bv_369[0] ne bv_365[0]) : UInt(1))) eq 1)
                        }

                        if (assert_cond_372[0] eq 0) {
                          print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,tile.py:447,tile.py:348,hcl_ext.py:727}: ntt input bank conflict

)
                          while ((assert_cond_372[0] eq 0)) {
                            assert_cond_372[0] = 0
                          }
                        }
                        rfaddr_373 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_373[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].2
                        }

                        bv_374 = compute((1,), UInt(3)) {
                          bv_374[x] = (uint2 rfaddr_373[0].1 : UInt(2))
                        }

                        rv_375 = compute((1,), UInt(8)) {
                          rv_375[x] = (uint7 rfaddr_373[0].0 : UInt(7))
                        }

                        rfaddr_376 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_376[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].3
                        }

                        bv_377 = compute((1,), UInt(3)) {
                          bv_377[x] = (uint2 rfaddr_376[0].1 : UInt(2))
                        }

                        rv_378 = compute((1,), UInt(8)) {
                          rv_378[x] = (uint7 rfaddr_376[0].0 : UInt(7))
                        }

                        assert_cond_379 = compute((1,), UInt(1)) {
                          assert_cond_379[x] = (bv_374[0] ne bv_377[0])
                        }

                        if (assert_cond_379[0] eq 0) {
                          print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,tile.py:448,tile.py:342,hcl_ext.py:727}: ntt write bank conflict

)
                          while ((assert_cond_379[0] eq 0)) {
                            assert_cond_379[0] = 0
                          }
                        }
                        rfaddr_380 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_380[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].4
                        }

                        bv_381 = compute((1,), UInt(3)) {
                          bv_381[x] = (uint2 rfaddr_380[0].1 : UInt(2))
                        }

                        rv_382 = compute((1,), UInt(8)) {
                          rv_382[x] = (uint7 rfaddr_380[0].0 : UInt(7))
                        }

                        rfaddr_383 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_383[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].5
                        }

                        bv_384 = compute((1,), UInt(3)) {
                          bv_384[x] = (uint2 rfaddr_383[0].1 : UInt(2))
                        }

                        rv_385 = compute((1,), UInt(8)) {
                          rv_385[x] = (uint7 rfaddr_383[0].0 : UInt(7))
                        }

                        ntt_in_swizzle = compute((128,), None) {
                          nttin_even_odd_arf = compute((32,), None) {
                            write_addr = compute((1,), Int(66)) {
                              write_addr[x] = (((i * 64) + 0) + j)
                            }

                            _addr_387 = compute((1,), Int(66)) {
                              _addr_387[x] = write_addr[0]
                            }

                            assert_cond_388 = compute((1,), UInt(1)) {
                              assert_cond_388[x] = ((_addr_387[0] + 1) le 8192)
                            }

                            if (assert_cond_388[0] eq 0) {
                              print(_addr_387[0], (_addr_387[0] + 1), 

Assertion failed {operation.py:322,tile.py:465,operation.py:370,operation.py:322,tile.py:465,tile.py:463,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_388[0] eq 0)) {
                                assert_cond_388[0] = 0
                              }
                            }
                            ntt_ain.alloc_c[write_addr[0]] = RFfoo.alloc_c[bv_381[0], rv_382[0], ((i * 64) + (2 * j))]
                            write_addr_389 = compute((1,), Int(66)) {
                              write_addr_389[x] = (((i * 64) + 0) + j)
                            }

                            _addr_390 = compute((1,), Int(66)) {
                              _addr_390[x] = write_addr_389[0]
                            }

                            assert_cond_391 = compute((1,), UInt(1)) {
                              assert_cond_391[x] = ((_addr_390[0] + 1) le 8192)
                            }

                            if (assert_cond_391[0] eq 0) {
                              print(_addr_390[0], (_addr_390[0] + 1), 

Assertion failed {operation.py:322,tile.py:465,operation.py:370,operation.py:322,tile.py:465,tile.py:464,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_391[0] eq 0)) {
                                assert_cond_391[0] = 0
                              }
                            }
                            ntt_bin.alloc_c[write_addr_389[0]] = RFfoo.alloc_c[bv_381[0], rv_382[0], (((i * 64) + (2 * j)) + 1)]
                          }

                          nttin_even_odd_brf = compute((32,), None) {
                            write_addr_392 = compute((1,), Int(66)) {
                              write_addr_392[x] = (((i * 64) + 32) + j)
                            }

                            _addr_393 = compute((1,), Int(66)) {
                              _addr_393[x] = write_addr_392[0]
                            }

                            assert_cond_394 = compute((1,), UInt(1)) {
                              assert_cond_394[x] = ((_addr_393[0] + 1) le 8192)
                            }

                            if (assert_cond_394[0] eq 0) {
                              print(_addr_393[0], (_addr_393[0] + 1), 

Assertion failed {operation.py:322,tile.py:466,operation.py:370,operation.py:322,tile.py:466,tile.py:463,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_394[0] eq 0)) {
                                assert_cond_394[0] = 0
                              }
                            }
                            ntt_ain.alloc_c[write_addr_392[0]] = RFfoo.alloc_c[bv_384[0], rv_385[0], ((i * 64) + (2 * j))]
                            write_addr_395 = compute((1,), Int(66)) {
                              write_addr_395[x] = (((i * 64) + 32) + j)
                            }

                            _addr_396 = compute((1,), Int(66)) {
                              _addr_396[x] = write_addr_395[0]
                            }

                            assert_cond_397 = compute((1,), UInt(1)) {
                              assert_cond_397[x] = ((_addr_396[0] + 1) le 8192)
                            }

                            if (assert_cond_397[0] eq 0) {
                              print(_addr_396[0], (_addr_396[0] + 1), 

Assertion failed {operation.py:322,tile.py:466,operation.py:370,operation.py:322,tile.py:466,tile.py:464,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_397[0] eq 0)) {
                                assert_cond_397[0] = 0
                              }
                            }
                            ntt_bin.alloc_c[write_addr_395[0]] = RFfoo.alloc_c[bv_384[0], rv_385[0], (((i * 64) + (2 * j)) + 1)]
                          }

                        }

                        mone_5_4 = compute((1,), UInt(6)) {
                          mone_5_4[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].16
                        }

                        mone_3_1 = compute((1,), UInt(6)) {
                          mone_3_1[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].8
                        }

                        mone_0 = compute((1,), UInt(6)) {
                          mone_0[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].1
                        }

                        read_addr_401 = compute((1,), UInt(8)) {
                          read_addr_401[x] = (((mone_5_4[0] << 4) + (mone_3_1[0] << 1)) + mone_0[0])
                        }

                        _addr_402 = compute((1,), UInt(8)) {
                          _addr_402[x] = read_addr_401[0]
                        }

                        assert_cond_403 = compute((1,), UInt(1)) {
                          assert_cond_403[x] = ((_addr_402[0] + 1) le 64)
                        }

                        if (assert_cond_403[0] eq 0) {
                          print(_addr_402[0], (_addr_402[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:477,levelinfo.py:113,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: mone Mem.read exceeds memory size: addr=%d+size=%d > 64

)
                          while ((assert_cond_403[0] eq 0)) {
                            assert_cond_403[0] = 0
                          }
                        }
                        Mem.read_c_47 = compute((1,), UInt(32)) {
                          Mem.read_c_47[i] = mone.alloc_c[(read_addr_401[0] + i)]
                        }

                        mone_val[0] = Mem.read_c_47[0]
                        read_addr_404 = compute((1,), UInt(6)) {
                          read_addr_404[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].6
                        }

                        _addr_405 = compute((1,), UInt(6)) {
                          _addr_405[x] = read_addr_404[0]
                        }

                        assert_cond_406 = compute((1,), UInt(1)) {
                          assert_cond_406[x] = ((_addr_405[0] + 1) le 64)
                        }

                        if (assert_cond_406[0] eq 0) {
                          print(_addr_405[0], (_addr_405[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:478,levelinfo.py:109,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: twpwrs Mem.read exceeds memory size: addr=%d+size=%d > 64

)
                          while ((assert_cond_406[0] eq 0)) {
                            assert_cond_406[0] = 0
                          }
                        }
                        Mem.read_c_48 = compute((1,), UInt(32)) {
                          Mem.read_c_48[i] = twpwrs.alloc_c[exe_inst_ce0.cetiles.Mtile.UC_ntt[0].7, (read_addr_404[0] + i)]
                        }

                        if (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 0) {
                          mone_fill = compute((8192,), None) {
                            write_addr_407 = compute((1,), Index) {
                              write_addr_407[x] = i
                            }

                            _addr_408 = compute((1,), Index) {
                              _addr_408[x] = write_addr_407[0]
                            }

                            assert_cond_409 = compute((1,), UInt(1)) {
                              assert_cond_409[x] = ((_addr_408[0] + 1) le 8192)
                            }

                            if (assert_cond_409[0] eq 0) {
                              print(_addr_408[0], (_addr_408[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:484,operation.py:370,operation.py:322,tile.py:483,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_409[0] eq 0)) {
                                assert_cond_409[0] = 0
                              }
                            }
                            ntt_win.alloc_c[write_addr_407[0]] = mone_val[0]
                          }

                        }
                        else if ((((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 13) : UInt(1))) && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 14) : UInt(1))) && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 15) : UInt(1))) && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 2) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 16) : UInt(1))) && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 3) : UInt(1))) : UInt(1))) ne 0)) {
                          rfaddr_410 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_410[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].12
                          }

                          bv_411 = compute((1,), UInt(3)) {
                            bv_411[x] = (uint2 rfaddr_410[0].1 : UInt(2))
                          }

                          rv_412 = compute((1,), UInt(8)) {
                            rv_412[x] = (uint7 rfaddr_410[0].0 : UInt(7))
                          }

                          final_interleave = compute((128,), None) {
                            final_interleave_cp = compute((32,), None) {
                              write_addr_413 = compute((1,), Int(66)) {
                                write_addr_413[x] = (((i * 64) + 0) + j)
                              }

                              _addr_414 = compute((1,), Int(66)) {
                                _addr_414[x] = write_addr_413[0]
                              }

                              assert_cond_415 = compute((1,), UInt(1)) {
                                assert_cond_415[x] = ((_addr_414[0] + 1) le 8192)
                              }

                              if (assert_cond_415[0] eq 0) {
                                print(_addr_414[0], (_addr_414[0] + 1), 

Assertion failed {operation.py:370,operation.py:322,tile.py:499,operation.py:370,operation.py:322,tile.py:497,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_415[0] eq 0)) {
                                  assert_cond_415[0] = 0
                                }
                              }
                              ntt_win.alloc_c[write_addr_413[0]] = RFfoo.alloc_c[bv_411[0], rv_412[0], (((i * 64) + (2 * j)) + 0)]
                              write_addr_416 = compute((1,), Int(66)) {
                                write_addr_416[x] = (((i * 64) + 32) + j)
                              }

                              _addr_417 = compute((1,), Int(66)) {
                                _addr_417[x] = write_addr_416[0]
                              }

                              assert_cond_418 = compute((1,), UInt(1)) {
                                assert_cond_418[x] = ((_addr_417[0] + 1) le 8192)
                              }

                              if (assert_cond_418[0] eq 0) {
                                print(_addr_417[0], (_addr_417[0] + 1), 

Assertion failed {operation.py:370,operation.py:322,tile.py:499,operation.py:370,operation.py:322,tile.py:498,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_418[0] eq 0)) {
                                  assert_cond_418[0] = 0
                                }
                              }
                              ntt_win.alloc_c[write_addr_416[0]] = RFfoo.alloc_c[bv_411[0], rv_412[0], (((i * 64) + (2 * j)) + 1)]
                            }

                          }

                        }
                        else {
                          rfaddr_419 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_419[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].11
                          }

                          bv_420 = compute((1,), UInt(3)) {
                            bv_420[x] = (uint2 rfaddr_419[0].1 : UInt(2))
                          }

                          rv_421 = compute((1,), UInt(8)) {
                            rv_421[x] = (uint7 rfaddr_419[0].0 : UInt(7))
                          }

                          copyN_52 = compute((8192,), None) {
                            write_addr_422 = compute((1,), Int(34)) {
                              write_addr_422[x] = (0 + i)
                            }

                            _addr_423 = compute((1,), Int(34)) {
                              _addr_423[x] = write_addr_422[0]
                            }

                            assert_cond_424 = compute((1,), UInt(1)) {
                              assert_cond_424[x] = ((_addr_423[0] + 1) le 8192)
                            }

                            if (assert_cond_424[0] eq 0) {
                              print(_addr_423[0], (_addr_423[0] + 1), 

Assertion failed {instruction.py:318,tile.py:509,hcl_ext.py:231,operation.py:370,operation.py:322,hcl_ext.py:230,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_424[0] eq 0)) {
                                assert_cond_424[0] = 0
                              }
                            }
                            ntt_win.alloc_c[write_addr_422[0]] = RFfoo.alloc_c[bv_420[0], rv_421[0], (0 + i)]
                          }

                        }
                        bflyfn_53 = compute((8192,), None) {
                          read_addr_425 = compute((1,), Index) {
                            read_addr_425[x] = i
                          }

                          _addr_426 = compute((1,), Index) {
                            _addr_426[x] = read_addr_425[0]
                          }

                          assert_cond_427 = compute((1,), UInt(1)) {
                            assert_cond_427[x] = ((_addr_426[0] + 1) le 8192)
                          }

                          if (assert_cond_427[0] eq 0) {
                            print(_addr_426[0], (_addr_426[0] + 1), 

Assertion failed {tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:325,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                            while ((assert_cond_427[0] eq 0)) {
                              assert_cond_427[0] = 0
                            }
                          }
                          Mem.read_c_54 = compute((1,), UInt(32)) {
                            Mem.read_c_54[i] = ntt_ain.alloc_c[(read_addr_425[0] + i)]
                          }

                          _a_428 = compute((1,), UInt(64)) {
                            _a_428[x] = Mem.read_c_54[0]
                          }

                          read_addr_429 = compute((1,), Index) {
                            read_addr_429[x] = i
                          }

                          _addr_430 = compute((1,), Index) {
                            _addr_430[x] = read_addr_429[0]
                          }

                          assert_cond_431 = compute((1,), UInt(1)) {
                            assert_cond_431[x] = ((_addr_430[0] + 1) le 8192)
                          }

                          if (assert_cond_431[0] eq 0) {
                            print(_addr_430[0], (_addr_430[0] + 1), 

Assertion failed {tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:326,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                            while ((assert_cond_431[0] eq 0)) {
                              assert_cond_431[0] = 0
                            }
                          }
                          Mem.read_c_55 = compute((1,), UInt(32)) {
                            Mem.read_c_55[i] = ntt_bin.alloc_c[(read_addr_429[0] + i)]
                          }

                          _b_432 = compute((1,), UInt(64)) {
                            _b_432[x] = Mem.read_c_55[0]
                          }

                          read_addr_433 = compute((1,), Index) {
                            read_addr_433[x] = i
                          }

                          _addr_434 = compute((1,), Index) {
                            _addr_434[x] = read_addr_433[0]
                          }

                          assert_cond_435 = compute((1,), UInt(1)) {
                            assert_cond_435[x] = ((_addr_434[0] + 1) le 8192)
                          }

                          if (assert_cond_435[0] eq 0) {
                            print(_addr_434[0], (_addr_434[0] + 1), 

Assertion failed {tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:327,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_win Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                            while ((assert_cond_435[0] eq 0)) {
                              assert_cond_435[0] = 0
                            }
                          }
                          Mem.read_c_56 = compute((1,), UInt(32)) {
                            Mem.read_c_56[i] = ntt_win.alloc_c[(read_addr_433[0] + i)]
                          }

                          _w_436 = compute((1,), UInt(64)) {
                            _w_436[x] = Mem.read_c_56[0]
                          }

                          _q_437 = compute((1,), UInt(64)) {
                            _q_437[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9
                          }

                          assert_cond_438 = compute((1,), UInt(1)) {
                            assert_cond_438[x] = ((_q_437[0] & 4294967295) eq 1)
                          }

                          if (assert_cond_438[0] eq 0) {
                            print(_q_437[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:48,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                            while ((assert_cond_438[0] eq 0)) {
                              assert_cond_438[0] = 0
                            }
                          }
                          mont_redc_439 = compute((1,), UInt(128)) {
                            mont_redc_439[x] = (((((((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32) + (((neg (((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32)) & 4294967295) * _q_437[0])) >> 32) lt _q_437[0]) ? (((((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32) + (((neg (((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32)) & 4294967295) * _q_437[0])) >> 32) : ((((((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32) + (((neg (((_w_436[0] * _b_432[0]) + (((neg (_w_436[0] * _b_432[0])) & 4294967295) * _q_437[0])) >> 32)) & 4294967295) * _q_437[0])) >> 32) - _q_437[0]))
                          }

                          write_addr_440 = compute((1,), Index) {
                            write_addr_440[x] = i
                          }

                          _addr_441 = compute((1,), Index) {
                            _addr_441[x] = write_addr_440[0]
                          }

                          assert_cond_442 = compute((1,), UInt(1)) {
                            assert_cond_442[x] = ((_addr_441[0] + 1) le 8192)
                          }

                          if (assert_cond_442[0] eq 0) {
                            print(_addr_441[0], (_addr_441[0] + 1), 

Assertion failed {instruction.py:318,tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:333,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdataouttop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                            while ((assert_cond_442[0] eq 0)) {
                              assert_cond_442[0] = 0
                            }
                          }
                          nttdataouttop.alloc_c[write_addr_440[0]] = ((_a_428[0] + mont_redc_439[0]) % _q_437[0])
                          write_addr_443 = compute((1,), Index) {
                            write_addr_443[x] = i
                          }

                          _addr_444 = compute((1,), Index) {
                            _addr_444[x] = write_addr_443[0]
                          }

                          assert_cond_445 = compute((1,), UInt(1)) {
                            assert_cond_445[x] = ((_addr_444[0] + 1) le 8192)
                          }

                          if (assert_cond_445[0] eq 0) {
                            print(_addr_444[0], (_addr_444[0] + 1), 

Assertion failed {instruction.py:318,tile.py:511,tile.py:337,operation.py:370,operation.py:322,tile.py:335,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdataoutbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                            while ((assert_cond_445[0] eq 0)) {
                              assert_cond_445[0] = 0
                            }
                          }
                          nttdataoutbot.alloc_c[write_addr_443[0]] = (((_q_437[0] + _a_428[0]) - mont_redc_439[0]) % _q_437[0])
                        }

                        rfaddr_446 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                          rfaddr_446[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].10
                        }

                        bv_447 = compute((1,), UInt(3)) {
                          bv_447[x] = (uint2 rfaddr_446[0].1 : UInt(2))
                        }

                        rv_448 = compute((1,), UInt(8)) {
                          rv_448[x] = (uint7 rfaddr_446[0].0 : UInt(7))
                        }

                        blocknum = compute((1,), UInt(3)) {
                          blocknum[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].14
                        }

                        modsel = compute((1,), UInt(6)) {
                          modsel[x] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].6
                        }

                        modsel[0] = (modsel[0] & 31)
                        ntt_update_twiddle = compute((8192,), None) {
                          i_tmp = compute((1,), UInt(15)) {
                            i_tmp[x] = i
                          }

                          tilenum = compute((1,), UInt(7)) {
                            tilenum[x] = 0
                          }

                          tilenum[0] = (((i & 4032) >> 5) + (i >> 12))
                          t_en16 = compute((1,), UInt(1)) {
                            t_en16[x] = 0
                          }

                          t_en32 = compute((1,), UInt(1)) {
                            t_en32[x] = 0
                          }

                          t_en64 = compute((1,), UInt(1)) {
                            t_en64[x] = 0
                          }

                          t_en128 = compute((1,), UInt(1)) {
                            t_en128[x] = 0
                          }

                          t_up = compute((1,), UInt(1)) {
                            t_up[x] = 0
                          }

                          t_en16[0] = (((((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 0) : UInt(1))) && (uint1 (tilenum[0][0] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 1) : UInt(1))) && (uint1 (tilenum[0][6] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 2) : UInt(1))) && (uint1 (tilenum[0][5] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 3) : UInt(1))) && (uint1 (tilenum[0][4] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 4) : UInt(1))) && (uint1 (tilenum[0][3] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 5) : UInt(1))) && (uint1 (tilenum[0][2] eq 1) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 6) : UInt(1))) && (uint1 (tilenum[0][1] eq 1) : UInt(1))) : UInt(1)))
                          t_en32[0] = ((0 || (uint1 t_en16[0] : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 7) : UInt(1))) && (uint1 (blocknum[0][0] ne 0) : UInt(1))) : UInt(1)))
                          t_en64[0] = (((0 || (uint1 t_en16[0] : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 7) : UInt(1))) && (uint1 (blocknum[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 8) : UInt(1))) && (uint1 (blocknum[0][0] ne 0) : UInt(1))) : UInt(1)))
                          t_en128[0] = ((((0 || (uint1 t_en16[0] : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 7) : UInt(1))) && (uint1 (blocknum[0][2] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 8) : UInt(1))) && (uint1 (blocknum[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_ntt[0].13 eq 9) : UInt(1))) && (uint1 (blocknum[0][0] ne 0) : UInt(1))) : UInt(1)))
                          t_up[0] = ((exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 0) ? t_en16[0] : ((exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 1) ? t_en32[0] : ((exe_inst_ce0.cetiles.Mtile.UC_ntt[0].15 eq 2) ? t_en64[0] : t_en128[0])))
                          if (t_up[0] eq 0) {
                            if (modsel[0] lt 6) {
                              t_up[0] = ((i_tmp[modsel[0]] ne 0) ? 1 : 0)
                            }
                          }
                          if (t_up[0] ne 0) {
                            read_addr_458 = compute((1,), Index) {
                              read_addr_458[x] = i
                            }

                            _addr_459 = compute((1,), Index) {
                              _addr_459[x] = read_addr_458[0]
                            }

                            assert_cond_460 = compute((1,), UInt(1)) {
                              assert_cond_460[x] = ((_addr_459[0] + 1) le 8192)
                            }

                            if (assert_cond_460[0] eq 0) {
                              print(_addr_459[0], (_addr_459[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:618,operation.py:370,operation.py:322,tile.py:613,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_win Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_460[0] eq 0)) {
                                assert_cond_460[0] = 0
                              }
                            }
                            Mem.read_c_58 = compute((1,), UInt(32)) {
                              Mem.read_c_58[i] = ntt_win.alloc_c[(read_addr_458[0] + i)]
                            }

                            assert_cond_461 = compute((1,), UInt(1)) {
                              assert_cond_461[x] = ((exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9 & 65535) eq 1)
                            }

                            if (assert_cond_461[0] eq 0) {
                              print(exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9, 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:618,operation.py:370,operation.py:322,tile.py:613,ntt.py:52,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                              while ((assert_cond_461[0] eq 0)) {
                                assert_cond_461[0] = 0
                              }
                            }
                            mont_redc_462 = compute((1,), UInt(64)) {
                              mont_redc_462[x] = (((((((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) + (((neg (((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16)) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) lt exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9) ? (((((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) + (((neg (((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16)) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) : ((((((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) + (((neg (((Mem.read_c_58[0] * Mem.read_c_48[0]) + (((neg (Mem.read_c_58[0] * Mem.read_c_48[0])) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16)) & 65535) * exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9)) >> 16) - exe_inst_ce0.cetiles.Mtile.UC_ntt[0].9))
                            }

                            RFfoo.alloc_c[bv_447[0], rv_448[0], i] = mont_redc_462[0]
                          }
                          else {
                            read_addr_463 = compute((1,), Index) {
                              read_addr_463[x] = i
                            }

                            _addr_464 = compute((1,), Index) {
                              _addr_464[x] = read_addr_463[0]
                            }

                            assert_cond_465 = compute((1,), UInt(1)) {
                              assert_cond_465[x] = ((_addr_464[0] + 1) le 8192)
                            }

                            if (assert_cond_465[0] eq 0) {
                              print(_addr_464[0], (_addr_464[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:618,operation.py:370,operation.py:322,tile.py:616,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_win Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_465[0] eq 0)) {
                                assert_cond_465[0] = 0
                              }
                            }
                            Mem.read_c_59 = compute((1,), UInt(32)) {
                              Mem.read_c_59[i] = ntt_win.alloc_c[(read_addr_463[0] + i)]
                            }

                            RFfoo.alloc_c[bv_447[0], rv_448[0], i] = Mem.read_c_59[0]
                          }
                        }

                        ntt_intt_top_addr[0] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].2
                        ntt_intt_bot_addr[0] = exe_inst_ce0.cetiles.Mtile.UC_ntt[0].3
                        flag_ntt[0] = 1
                      }
                      else {
                        if (inst_id_233[0] eq 6) {
                          exe_inst_ce0.cetiles.Mtile.UC_intt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('dsttop', UInt(9)), ('dstbot', UInt(9)), ('srctop', UInt(9)), ('srcbot', UInt(9)), ('__rsrv43__', UInt(6)), ('__rsrv49__', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('__rsrv89__', UInt(9)), ('srctw', UInt(9)), ('__rsrv107__', UInt(9)), ('stagenum', UInt(5)), ('__rsrv121__', UInt(3)), ('__rsrv124__', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                            exe_inst_ce0.cetiles.Mtile.UC_intt[x] = execute_inst_247[0]
                          }

                          assert_cond_467 = compute((1,), UInt(1)) {
                            assert_cond_467[x] = (flag_intt[0] eq 0)
                          }

                          if (assert_cond_467[0] eq 0) {
                            print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,tile.py:633,hcl_ext.py:727}: INTT flag already set?

)
                            while ((assert_cond_467[0] eq 0)) {
                              assert_cond_467[0] = 0
                            }
                          }
                          rfaddr_468 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_468[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].2
                          }

                          bv_469 = compute((1,), UInt(3)) {
                            bv_469[x] = (uint2 rfaddr_468[0].1 : UInt(2))
                          }

                          rv_470 = compute((1,), UInt(8)) {
                            rv_470[x] = (uint7 rfaddr_468[0].0 : UInt(7))
                          }

                          rfaddr_471 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_471[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].3
                          }

                          bv_472 = compute((1,), UInt(3)) {
                            bv_472[x] = (uint2 rfaddr_471[0].1 : UInt(2))
                          }

                          rv_473 = compute((1,), UInt(8)) {
                            rv_473[x] = (uint7 rfaddr_471[0].0 : UInt(7))
                          }

                          assert_cond_474 = compute((1,), UInt(1)) {
                            assert_cond_474[x] = (bv_469[0] ne bv_472[0])
                          }

                          if (assert_cond_474[0] eq 0) {
                            print(0, 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:635,tile.py:342,hcl_ext.py:727}: intt write bank conflict

)
                            while ((assert_cond_474[0] eq 0)) {
                              assert_cond_474[0] = 0
                            }
                          }
                          rfaddr_475 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_475[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].4
                          }

                          bv_476 = compute((1,), UInt(3)) {
                            bv_476[x] = (uint2 rfaddr_475[0].1 : UInt(2))
                          }

                          rv_477 = compute((1,), UInt(8)) {
                            rv_477[x] = (uint7 rfaddr_475[0].0 : UInt(7))
                          }

                          rfaddr_478 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                            rfaddr_478[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].5
                          }

                          bv_479 = compute((1,), UInt(3)) {
                            bv_479[x] = (uint2 rfaddr_478[0].1 : UInt(2))
                          }

                          rv_480 = compute((1,), UInt(8)) {
                            rv_480[x] = (uint7 rfaddr_478[0].0 : UInt(7))
                          }

                          intt_in_swizzle_a = compute((64,), None) {
                            ain64 = compute((64,), None) {
                              write_addr_481 = compute((1,), Int(65)) {
                                write_addr_481[x] = ((i * 128) + j)
                              }

                              _addr_482 = compute((1,), Int(65)) {
                                _addr_482[x] = write_addr_481[0]
                              }

                              assert_cond_483 = compute((1,), UInt(1)) {
                                assert_cond_483[x] = ((_addr_482[0] + 1) le 8192)
                              }

                              if (assert_cond_483[0] eq 0) {
                                print(_addr_482[0], (_addr_482[0] + 1), 

Assertion failed {tile.py:655,tile.py:652,operation.py:370,operation.py:322,tile.py:652,tile.py:651,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_483[0] eq 0)) {
                                  assert_cond_483[0] = 0
                                }
                              }
                              ntt_ain.alloc_c[write_addr_481[0]] = RFfoo.alloc_c[bv_476[0], rv_477[0], ((0 + (i * 64)) + j)]
                            }

                            bin64 = compute((64,), None) {
                              write_addr_484 = compute((1,), Int(66)) {
                                write_addr_484[x] = (((i * 128) + 64) + j)
                              }

                              _addr_485 = compute((1,), Int(66)) {
                                _addr_485[x] = write_addr_484[0]
                              }

                              assert_cond_486 = compute((1,), UInt(1)) {
                                assert_cond_486[x] = ((_addr_485[0] + 1) le 8192)
                              }

                              if (assert_cond_486[0] eq 0) {
                                print(_addr_485[0], (_addr_485[0] + 1), 

Assertion failed {tile.py:655,tile.py:653,operation.py:370,operation.py:322,tile.py:653,tile.py:651,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_486[0] eq 0)) {
                                  assert_cond_486[0] = 0
                                }
                              }
                              ntt_ain.alloc_c[write_addr_484[0]] = RFfoo.alloc_c[bv_479[0], rv_480[0], ((0 + (i * 64)) + j)]
                            }

                          }

                          intt_in_swizzle_b = compute((64,), None) {
                            ain64_64 = compute((64,), None) {
                              write_addr_487 = compute((1,), Int(65)) {
                                write_addr_487[x] = ((i * 128) + j)
                              }

                              _addr_488 = compute((1,), Int(65)) {
                                _addr_488[x] = write_addr_487[0]
                              }

                              assert_cond_489 = compute((1,), UInt(1)) {
                                assert_cond_489[x] = ((_addr_488[0] + 1) le 8192)
                              }

                              if (assert_cond_489[0] eq 0) {
                                print(_addr_488[0], (_addr_488[0] + 1), 

Assertion failed {tile.py:656,tile.py:652,operation.py:370,operation.py:322,tile.py:652,tile.py:651,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_489[0] eq 0)) {
                                  assert_cond_489[0] = 0
                                }
                              }
                              ntt_bin.alloc_c[write_addr_487[0]] = RFfoo.alloc_c[bv_476[0], rv_477[0], ((4096 + (i * 64)) + j)]
                            }

                            bin64_65 = compute((64,), None) {
                              write_addr_490 = compute((1,), Int(66)) {
                                write_addr_490[x] = (((i * 128) + 64) + j)
                              }

                              _addr_491 = compute((1,), Int(66)) {
                                _addr_491[x] = write_addr_490[0]
                              }

                              assert_cond_492 = compute((1,), UInt(1)) {
                                assert_cond_492[x] = ((_addr_491[0] + 1) le 8192)
                              }

                              if (assert_cond_492[0] eq 0) {
                                print(_addr_491[0], (_addr_491[0] + 1), 

Assertion failed {tile.py:656,tile.py:653,operation.py:370,operation.py:322,tile.py:653,tile.py:651,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_492[0] eq 0)) {
                                  assert_cond_492[0] = 0
                                }
                              }
                              ntt_bin.alloc_c[write_addr_490[0]] = RFfoo.alloc_c[bv_479[0], rv_480[0], ((4096 + (i * 64)) + j)]
                            }

                          }

                          mone_5_4_493 = compute((1,), UInt(6)) {
                            mone_5_4_493[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].16
                          }

                          mone_3_1_494 = compute((1,), UInt(6)) {
                            mone_3_1_494[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].8
                          }

                          mone_0_495 = compute((1,), UInt(6)) {
                            mone_0_495[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].1
                          }

                          read_addr_496 = compute((1,), UInt(8)) {
                            read_addr_496[x] = (((mone_5_4_493[0] << 4) + (mone_3_1_494[0] << 1)) + (mone_0_495[0] << 0))
                          }

                          _addr_497 = compute((1,), UInt(8)) {
                            _addr_497[x] = read_addr_496[0]
                          }

                          assert_cond_498 = compute((1,), UInt(1)) {
                            assert_cond_498[x] = ((_addr_497[0] + 1) le 64)
                          }

                          if (assert_cond_498[0] eq 0) {
                            print(_addr_497[0], (_addr_497[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:666,levelinfo.py:113,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: mone Mem.read exceeds memory size: addr=%d+size=%d > 64

)
                            while ((assert_cond_498[0] eq 0)) {
                              assert_cond_498[0] = 0
                            }
                          }
                          Mem.read_c_66 = compute((1,), UInt(32)) {
                            Mem.read_c_66[i] = mone.alloc_c[(read_addr_496[0] + i)]
                          }

                          mone_val[0] = Mem.read_c_66[0]
                          if (exe_inst_ce0.cetiles.Mtile.UC_intt[0].13 eq 0) {
                            mone_fill_67 = compute((8192,), None) {
                              write_addr_499 = compute((1,), Index) {
                                write_addr_499[x] = i
                              }

                              _addr_500 = compute((1,), Index) {
                                _addr_500[x] = write_addr_499[0]
                              }

                              assert_cond_501 = compute((1,), UInt(1)) {
                                assert_cond_501[x] = ((_addr_500[0] + 1) le 8192)
                              }

                              if (assert_cond_501[0] eq 0) {
                                print(_addr_500[0], (_addr_500[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:672,operation.py:370,operation.py:322,tile.py:671,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_501[0] eq 0)) {
                                  assert_cond_501[0] = 0
                                }
                              }
                              ntt_win.alloc_c[write_addr_499[0]] = mone_val[0]
                            }

                          }
                          else {
                            rfaddr_502 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                              rfaddr_502[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].11
                            }

                            bv_503 = compute((1,), UInt(3)) {
                              bv_503[x] = (uint2 rfaddr_502[0].1 : UInt(2))
                            }

                            rv_504 = compute((1,), UInt(8)) {
                              rv_504[x] = (uint7 rfaddr_502[0].0 : UInt(7))
                            }

                            copyN_68 = compute((8192,), None) {
                              write_addr_505 = compute((1,), Int(34)) {
                                write_addr_505[x] = (0 + i)
                              }

                              _addr_506 = compute((1,), Int(34)) {
                                _addr_506[x] = write_addr_505[0]
                              }

                              assert_cond_507 = compute((1,), UInt(1)) {
                                assert_cond_507[x] = ((_addr_506[0] + 1) le 8192)
                              }

                              if (assert_cond_507[0] eq 0) {
                                print(_addr_506[0], (_addr_506[0] + 1), 

Assertion failed {instruction.py:318,tile.py:674,hcl_ext.py:231,operation.py:370,operation.py:322,hcl_ext.py:230,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_507[0] eq 0)) {
                                  assert_cond_507[0] = 0
                                }
                              }
                              ntt_win.alloc_c[write_addr_505[0]] = RFfoo.alloc_c[bv_503[0], rv_504[0], (0 + i)]
                            }

                          }
                          bflyfn_69 = compute((8192,), None) {
                            read_addr_508 = compute((1,), Index) {
                              read_addr_508[x] = i
                            }

                            _addr_509 = compute((1,), Index) {
                              _addr_509[x] = read_addr_508[0]
                            }

                            assert_cond_510 = compute((1,), UInt(1)) {
                              assert_cond_510[x] = ((_addr_509[0] + 1) le 8192)
                            }

                            if (assert_cond_510[0] eq 0) {
                              print(_addr_509[0], (_addr_509[0] + 1), 

Assertion failed {tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:325,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_ain Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_510[0] eq 0)) {
                                assert_cond_510[0] = 0
                              }
                            }
                            Mem.read_c_70 = compute((1,), UInt(32)) {
                              Mem.read_c_70[i] = ntt_ain.alloc_c[(read_addr_508[0] + i)]
                            }

                            _a_511 = compute((1,), UInt(64)) {
                              _a_511[x] = Mem.read_c_70[0]
                            }

                            read_addr_512 = compute((1,), Index) {
                              read_addr_512[x] = i
                            }

                            _addr_513 = compute((1,), Index) {
                              _addr_513[x] = read_addr_512[0]
                            }

                            assert_cond_514 = compute((1,), UInt(1)) {
                              assert_cond_514[x] = ((_addr_513[0] + 1) le 8192)
                            }

                            if (assert_cond_514[0] eq 0) {
                              print(_addr_513[0], (_addr_513[0] + 1), 

Assertion failed {tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:326,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_514[0] eq 0)) {
                                assert_cond_514[0] = 0
                              }
                            }
                            Mem.read_c_71 = compute((1,), UInt(32)) {
                              Mem.read_c_71[i] = ntt_bin.alloc_c[(read_addr_512[0] + i)]
                            }

                            _b_515 = compute((1,), UInt(64)) {
                              _b_515[x] = Mem.read_c_71[0]
                            }

                            read_addr_516 = compute((1,), Index) {
                              read_addr_516[x] = i
                            }

                            _addr_517 = compute((1,), Index) {
                              _addr_517[x] = read_addr_516[0]
                            }

                            assert_cond_518 = compute((1,), UInt(1)) {
                              assert_cond_518[x] = ((_addr_517[0] + 1) le 8192)
                            }

                            if (assert_cond_518[0] eq 0) {
                              print(_addr_517[0], (_addr_517[0] + 1), 

Assertion failed {tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:327,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_win Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_518[0] eq 0)) {
                                assert_cond_518[0] = 0
                              }
                            }
                            Mem.read_c_72 = compute((1,), UInt(32)) {
                              Mem.read_c_72[i] = ntt_win.alloc_c[(read_addr_516[0] + i)]
                            }

                            _w_519 = compute((1,), UInt(64)) {
                              _w_519[x] = Mem.read_c_72[0]
                            }

                            _q_520 = compute((1,), UInt(64)) {
                              _q_520[x] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].9
                            }

                            assert_cond_521 = compute((1,), UInt(1)) {
                              assert_cond_521[x] = ((_q_520[0] & 4294967295) eq 1)
                            }

                            if (assert_cond_521[0] eq 0) {
                              print(_q_520[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:48,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                              while ((assert_cond_521[0] eq 0)) {
                                assert_cond_521[0] = 0
                              }
                            }
                            mont_redc_522 = compute((1,), UInt(128)) {
                              mont_redc_522[x] = (((((((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32) + (((neg (((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32)) & 4294967295) * _q_520[0])) >> 32) lt _q_520[0]) ? (((((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32) + (((neg (((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32)) & 4294967295) * _q_520[0])) >> 32) : ((((((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32) + (((neg (((_w_519[0] * _b_515[0]) + (((neg (_w_519[0] * _b_515[0])) & 4294967295) * _q_520[0])) >> 32)) & 4294967295) * _q_520[0])) >> 32) - _q_520[0]))
                            }

                            write_addr_523 = compute((1,), Index) {
                              write_addr_523[x] = i
                            }

                            _addr_524 = compute((1,), Index) {
                              _addr_524[x] = write_addr_523[0]
                            }

                            assert_cond_525 = compute((1,), UInt(1)) {
                              assert_cond_525[x] = ((_addr_524[0] + 1) le 8192)
                            }

                            if (assert_cond_525[0] eq 0) {
                              print(_addr_524[0], (_addr_524[0] + 1), 

Assertion failed {instruction.py:318,tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:333,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdataouttop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_525[0] eq 0)) {
                                assert_cond_525[0] = 0
                              }
                            }
                            inttdataouttop.alloc_c[write_addr_523[0]] = ((_a_511[0] + mont_redc_522[0]) % _q_520[0])
                            write_addr_526 = compute((1,), Index) {
                              write_addr_526[x] = i
                            }

                            _addr_527 = compute((1,), Index) {
                              _addr_527[x] = write_addr_526[0]
                            }

                            assert_cond_528 = compute((1,), UInt(1)) {
                              assert_cond_528[x] = ((_addr_527[0] + 1) le 8192)
                            }

                            if (assert_cond_528[0] eq 0) {
                              print(_addr_527[0], (_addr_527[0] + 1), 

Assertion failed {instruction.py:318,tile.py:676,tile.py:337,operation.py:370,operation.py:322,tile.py:335,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdataoutbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                              while ((assert_cond_528[0] eq 0)) {
                                assert_cond_528[0] = 0
                              }
                            }
                            inttdataoutbot.alloc_c[write_addr_526[0]] = (((_q_520[0] + _a_511[0]) - mont_redc_522[0]) % _q_520[0])
                          }

                          ntt_intt_top_addr[0] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].2
                          ntt_intt_bot_addr[0] = exe_inst_ce0.cetiles.Mtile.UC_intt[0].3
                          flag_intt[0] = 1
                        }
                        else {
                          if (inst_id_233[0] eq 7) {
                            exe_inst_ce0.cetiles.Mtile.UC_twintt = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('twmetadataMemRdDataSel_0', UInt(1)), ('__rsrv7__', UInt(9)), ('__rsrv16__', UInt(9)), ('__rsrv25__', UInt(9)), ('__rsrv34__', UInt(9)), ('twrfmodsel', UInt(6)), ('twrfrdaddr', UInt(5)), ('twmetadataMemRdDataSel_3_1', UInt(3)), ('q', UInt(32)), ('dsttw', UInt(9)), ('srctw', UInt(9)), ('__rsrv107__', UInt(9)), ('stagenum', UInt(5)), ('blocknum', UInt(3)), ('polyblocknum', UInt(2)), ('twmetadataMemRdDataSel_5_4', UInt(2))]))) {
                              exe_inst_ce0.cetiles.Mtile.UC_twintt[x] = execute_inst_247[0]
                            }

                            mone_5_4_530 = compute((1,), UInt(6)) {
                              mone_5_4_530[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].16
                            }

                            mone_3_1_531 = compute((1,), UInt(6)) {
                              mone_3_1_531[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].8
                            }

                            mone_0_532 = compute((1,), UInt(6)) {
                              mone_0_532[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].1
                            }

                            read_addr_533 = compute((1,), UInt(8)) {
                              read_addr_533[x] = (((mone_5_4_530[0] << 4) + (mone_3_1_531[0] << 1)) + (mone_0_532[0] << 0))
                            }

                            _addr_534 = compute((1,), UInt(8)) {
                              _addr_534[x] = read_addr_533[0]
                            }

                            assert_cond_535 = compute((1,), UInt(1)) {
                              assert_cond_535[x] = ((_addr_534[0] + 1) le 64)
                            }

                            if (assert_cond_535[0] eq 0) {
                              print(_addr_534[0], (_addr_534[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:706,levelinfo.py:113,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: mone Mem.read exceeds memory size: addr=%d+size=%d > 64

)
                              while ((assert_cond_535[0] eq 0)) {
                                assert_cond_535[0] = 0
                              }
                            }
                            Mem.read_c_73 = compute((1,), UInt(32)) {
                              Mem.read_c_73[i] = mone.alloc_c[(read_addr_533[0] + i)]
                            }

                            mone_val[0] = Mem.read_c_73[0]
                            read_addr_536 = compute((1,), UInt(6)) {
                              read_addr_536[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].6
                            }

                            _addr_537 = compute((1,), UInt(6)) {
                              _addr_537[x] = read_addr_536[0]
                            }

                            assert_cond_538 = compute((1,), UInt(1)) {
                              assert_cond_538[x] = ((_addr_537[0] + 1) le 64)
                            }

                            if (assert_cond_538[0] eq 0) {
                              print(_addr_537[0], (_addr_537[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:707,levelinfo.py:109,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: twpwrs Mem.read exceeds memory size: addr=%d+size=%d > 64

)
                              while ((assert_cond_538[0] eq 0)) {
                                assert_cond_538[0] = 0
                              }
                            }
                            Mem.read_c_74 = compute((1,), UInt(32)) {
                              Mem.read_c_74[i] = twpwrs.alloc_c[exe_inst_ce0.cetiles.Mtile.UC_twintt[0].7, (read_addr_536[0] + i)]
                            }

                            if (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 0) {
                              mone_fill_75 = compute((8192,), None) {
                                write_addr_539 = compute((1,), Index) {
                                  write_addr_539[x] = i
                                }

                                _addr_540 = compute((1,), Index) {
                                  _addr_540[x] = write_addr_539[0]
                                }

                                assert_cond_541 = compute((1,), UInt(1)) {
                                  assert_cond_541[x] = ((_addr_540[0] + 1) le 8192)
                                }

                                if (assert_cond_541[0] eq 0) {
                                  print(_addr_540[0], (_addr_540[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:713,operation.py:370,operation.py:322,tile.py:712,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                  while ((assert_cond_541[0] eq 0)) {
                                    assert_cond_541[0] = 0
                                  }
                                }
                                ntt_win.alloc_c[write_addr_539[0]] = mone_val[0]
                              }

                            }
                            else {
                              rfaddr_542 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_542[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].11
                              }

                              bv_543 = compute((1,), UInt(3)) {
                                bv_543[x] = (uint2 rfaddr_542[0].1 : UInt(2))
                              }

                              rv_544 = compute((1,), UInt(8)) {
                                rv_544[x] = (uint7 rfaddr_542[0].0 : UInt(7))
                              }

                              copyN_76 = compute((8192,), None) {
                                write_addr_545 = compute((1,), Int(34)) {
                                  write_addr_545[x] = (0 + i)
                                }

                                _addr_546 = compute((1,), Int(34)) {
                                  _addr_546[x] = write_addr_545[0]
                                }

                                assert_cond_547 = compute((1,), UInt(1)) {
                                  assert_cond_547[x] = ((_addr_546[0] + 1) le 8192)
                                }

                                if (assert_cond_547[0] eq 0) {
                                  print(_addr_546[0], (_addr_546[0] + 1), 

Assertion failed {instruction.py:318,tile.py:715,hcl_ext.py:231,operation.py:370,operation.py:322,hcl_ext.py:230,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_win Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                  while ((assert_cond_547[0] eq 0)) {
                                    assert_cond_547[0] = 0
                                  }
                                }
                                ntt_win.alloc_c[write_addr_545[0]] = RFfoo.alloc_c[bv_543[0], rv_544[0], (0 + i)]
                              }

                            }
                            blocknum_548 = compute((1,), UInt(3)) {
                              blocknum_548[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].14
                            }

                            twintt_bin_select = compute((8192,), None) {
                              i_tmp_549 = compute((1,), UInt(15)) {
                                i_tmp_549[x] = i
                              }

                              tilenum_550 = compute((1,), UInt(7)) {
                                tilenum_550[x] = 0
                              }

                              tilenum_550[0] = (((i & 4032) >> 5) + (i >> 12))
                              t_up_551 = compute((1,), UInt(1)) {
                                t_up_551[x] = 0
                              }

                              if (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 0) {
                                t_up_551[0] = i_tmp_549[0]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 1)) {
                                t_up_551[0] = i_tmp_549[1]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 2)) {
                                t_up_551[0] = i_tmp_549[2]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 3)) {
                                t_up_551[0] = i_tmp_549[3]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 4)) {
                                t_up_551[0] = i_tmp_549[4]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 5)) {
                                t_up_551[0] = i_tmp_549[5]
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 6)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (blocknum_548[0][0] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (blocknum_548[0][0] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (blocknum_548[0][0] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 7)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][2] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (blocknum_548[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (blocknum_548[0][1] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 8)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][3] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][2] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][1] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (blocknum_548[0][2] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 9)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][4] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][3] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][2] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][1] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 10)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][5] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][4] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][3] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][2] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 11)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][6] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][5] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][4] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][3] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 12)) {
                                t_up_551[0] = ((((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 0) : UInt(1))) && (uint1 (tilenum_550[0][0] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][6] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][5] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][4] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 13)) {
                                t_up_551[0] = (((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 1) : UInt(1))) && (uint1 (tilenum_550[0][0] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][6] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][5] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 14)) {
                                t_up_551[0] = ((0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 2) : UInt(1))) && (uint1 (tilenum_550[0][0] ne 0) : UInt(1))) : UInt(1))) || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][6] ne 0) : UInt(1))) : UInt(1)))
                              }
                              else if ((exe_inst_ce0.cetiles.Mtile.UC_twintt[0].13 eq 15)) {
                                t_up_551[0] = (0 || (uint1 ((1 && (uint1 (exe_inst_ce0.cetiles.Mtile.UC_twintt[0].15 eq 3) : UInt(1))) && (uint1 (tilenum_550[0][0] ne 0) : UInt(1))) : UInt(1)))
                              }
                              write_addr_552 = compute((1,), Index) {
                                write_addr_552[x] = i
                              }

                              _addr_553 = compute((1,), Index) {
                                _addr_553[x] = write_addr_552[0]
                              }

                              assert_cond_554 = compute((1,), UInt(1)) {
                                assert_cond_554[x] = ((_addr_553[0] + 1) le 8192)
                              }

                              if (assert_cond_554[0] eq 0) {
                                print(_addr_553[0], (_addr_553[0] + 1), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:812,operation.py:370,operation.py:322,tile.py:806,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_554[0] eq 0)) {
                                  assert_cond_554[0] = 0
                                }
                              }
                              ntt_bin.alloc_c[write_addr_552[0]] = (t_up_551[0] ? Mem.read_c_74[0] : mone_val[0])
                            }

                            rfaddr_555 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                              rfaddr_555[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].10
                            }

                            bv_556 = compute((1,), UInt(3)) {
                              bv_556[x] = (uint2 rfaddr_555[0].1 : UInt(2))
                            }

                            rv_557 = compute((1,), UInt(8)) {
                              rv_557[x] = (uint7 rfaddr_555[0].0 : UInt(7))
                            }

                            bflyfn_78 = compute((8192,), None) {
                              _a_558 = compute((1,), UInt(64)) {
                                _a_558[x] = 0
                              }

                              read_addr_559 = compute((1,), Index) {
                                read_addr_559[x] = i
                              }

                              _addr_560 = compute((1,), Index) {
                                _addr_560[x] = read_addr_559[0]
                              }

                              assert_cond_561 = compute((1,), UInt(1)) {
                                assert_cond_561[x] = ((_addr_560[0] + 1) le 8192)
                              }

                              if (assert_cond_561[0] eq 0) {
                                print(_addr_560[0], (_addr_560[0] + 1), 

Assertion failed {tile.py:815,tile.py:337,operation.py:370,operation.py:322,tile.py:326,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_bin Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_561[0] eq 0)) {
                                  assert_cond_561[0] = 0
                                }
                              }
                              Mem.read_c_79 = compute((1,), UInt(32)) {
                                Mem.read_c_79[i] = ntt_bin.alloc_c[(read_addr_559[0] + i)]
                              }

                              _b_562 = compute((1,), UInt(64)) {
                                _b_562[x] = Mem.read_c_79[0]
                              }

                              read_addr_563 = compute((1,), Index) {
                                read_addr_563[x] = i
                              }

                              _addr_564 = compute((1,), Index) {
                                _addr_564[x] = read_addr_563[0]
                              }

                              assert_cond_565 = compute((1,), UInt(1)) {
                                assert_cond_565[x] = ((_addr_564[0] + 1) le 8192)
                              }

                              if (assert_cond_565[0] eq 0) {
                                print(_addr_564[0], (_addr_564[0] + 1), 

Assertion failed {tile.py:815,tile.py:337,operation.py:370,operation.py:322,tile.py:327,tile.py:312,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: ntt_win Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
                                while ((assert_cond_565[0] eq 0)) {
                                  assert_cond_565[0] = 0
                                }
                              }
                              Mem.read_c_80 = compute((1,), UInt(32)) {
                                Mem.read_c_80[i] = ntt_win.alloc_c[(read_addr_563[0] + i)]
                              }

                              _w_566 = compute((1,), UInt(64)) {
                                _w_566[x] = Mem.read_c_80[0]
                              }

                              _q_567 = compute((1,), UInt(64)) {
                                _q_567[x] = exe_inst_ce0.cetiles.Mtile.UC_twintt[0].9
                              }

                              assert_cond_568 = compute((1,), UInt(1)) {
                                assert_cond_568[x] = ((_q_567[0] & 4294967295) eq 1)
                              }

                              if (assert_cond_568[0] eq 0) {
                                print(_q_567[0], 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:815,tile.py:337,operation.py:370,operation.py:322,tile.py:331,ntt.py:52,tile.py:269,hcl_ext.py:727}: Modulus 0x%x not in the correct form?

)
                                while ((assert_cond_568[0] eq 0)) {
                                  assert_cond_568[0] = 0
                                }
                              }
                              mont_redc_569 = compute((1,), UInt(128)) {
                                mont_redc_569[x] = (((((((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32) + (((neg (((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32)) & 4294967295) * _q_567[0])) >> 32) lt _q_567[0]) ? (((((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32) + (((neg (((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32)) & 4294967295) * _q_567[0])) >> 32) : ((((((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32) + (((neg (((_w_566[0] * _b_562[0]) + (((neg (_w_566[0] * _b_562[0])) & 4294967295) * _q_567[0])) >> 32)) & 4294967295) * _q_567[0])) >> 32) - _q_567[0]))
                              }

                              RFfoo.alloc_c[bv_556[0], rv_557[0], i] = mont_redc_569[0]
                            }

                          }
                          else {
                            if (inst_id_233[0] eq 8) {
                              exe_inst_ce0.cetiles.Mtile.UC_psub = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('b', UInt(9)), ('q', UInt(32)), ('__rsrv__', UInt(62))]))) {
                                exe_inst_ce0.cetiles.Mtile.UC_psub[x] = execute_inst_247[0]
                              }

                              rfaddr_571 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_571[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].3
                              }

                              bv_572 = compute((1,), UInt(3)) {
                                bv_572[x] = (uint2 rfaddr_571[0].1 : UInt(2))
                              }

                              rv_573 = compute((1,), UInt(8)) {
                                rv_573[x] = (uint7 rfaddr_571[0].0 : UInt(7))
                              }

                              rfaddr_574 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_574[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].4
                              }

                              bv_575 = compute((1,), UInt(3)) {
                                bv_575[x] = (uint2 rfaddr_574[0].1 : UInt(2))
                              }

                              rv_576 = compute((1,), UInt(8)) {
                                rv_576[x] = (uint7 rfaddr_574[0].0 : UInt(7))
                              }

                              assert_cond_577 = compute((1,), UInt(1)) {
                                assert_cond_577[x] = (bv_572[0] ne bv_575[0])
                              }

                              if (assert_cond_577[0] eq 0) {
                                print(0, 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:831,tile.py:342,hcl_ext.py:727}: psub read bank conflict

)
                                while ((assert_cond_577[0] eq 0)) {
                                  assert_cond_577[0] = 0
                                }
                              }
                              rfaddr_578 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_578[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].2
                              }

                              bv_579 = compute((1,), UInt(3)) {
                                bv_579[x] = (uint2 rfaddr_578[0].1 : UInt(2))
                              }

                              rv_580 = compute((1,), UInt(8)) {
                                rv_580[x] = (uint7 rfaddr_578[0].0 : UInt(7))
                              }

                              rfaddr_581 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_581[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].3
                              }

                              bv_582 = compute((1,), UInt(3)) {
                                bv_582[x] = (uint2 rfaddr_581[0].1 : UInt(2))
                              }

                              rv_583 = compute((1,), UInt(8)) {
                                rv_583[x] = (uint7 rfaddr_581[0].0 : UInt(7))
                              }

                              rfaddr_584 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                rfaddr_584[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].4
                              }

                              bv_585 = compute((1,), UInt(3)) {
                                bv_585[x] = (uint2 rfaddr_584[0].1 : UInt(2))
                              }

                              rv_586 = compute((1,), UInt(8)) {
                                rv_586[x] = (uint7 rfaddr_584[0].0 : UInt(7))
                              }

                              bflyfn_81 = compute((8192,), None) {
                                _a_587 = compute((1,), UInt(64)) {
                                  _a_587[x] = RFfoo.alloc_c[bv_582[0], rv_583[0], i]
                                }

                                _b_588 = compute((1,), UInt(64)) {
                                  _b_588[x] = RFfoo.alloc_c[bv_585[0], rv_586[0], i]
                                }

                                _w_589 = compute((1,), UInt(64)) {
                                  _w_589[x] = 0
                                }

                                _q_590 = compute((1,), UInt(64)) {
                                  _q_590[x] = exe_inst_ce0.cetiles.Mtile.UC_psub[0].5
                                }

                                RFfoo.alloc_c[bv_579[0], rv_580[0], i] = (((_q_590[0] + _a_587[0]) - _b_588[0]) % _q_590[0])
                              }

                            }
                            else {
                              if (inst_id_233[0] eq 9) {
                                exe_inst_ce0.cetiles.Mtile.UC_nop = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('count', UInt(10)), ('__rsrv__', UInt(111))]))) {
                                  exe_inst_ce0.cetiles.Mtile.UC_nop[x] = execute_inst_247[0]
                                }

                                if (nop_count_35[0] lt exe_inst_ce0.cetiles.Mtile.UC_nop[0].2) {
                                  nop_count_35[0] = (nop_count_35[0] + 1)
                                  tele_stall_count_54[0] = (tele_stall_count_54[0] + 1)
                                  flags_stall_44[0] = 1
                                  flags_stalled_45[0] = 1
                                  flags_break_46[0] = 1
                                }
                                else {
                                  nop_count_35[0] = 0
                                  flags_break_46[0] = 1
                                }
                              }
                              else {
                                if (inst_id_233[0] eq 10) {
                                  exe_inst_ce0.cetiles.Mtile.UC_cstore = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(33)), ('addr', UInt(9)), ('__rsrv__', UInt(80))]))) {
                                    exe_inst_ce0.cetiles.Mtile.UC_cstore[x] = execute_inst_247[0]
                                  }

                                  if (cstore_cycle[0] eq 1) {
                                    rfaddr_593 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                      rfaddr_593[x] = exe_inst_ce0.cetiles.Mtile.UC_cstore[0].2
                                    }

                                    bv_594 = compute((1,), UInt(3)) {
                                      bv_594[x] = (uint2 rfaddr_593[0].1 : UInt(2))
                                    }

                                    rv_595 = compute((1,), UInt(8)) {
                                      rv_595[x] = (uint7 rfaddr_593[0].0 : UInt(7))
                                    }

                                    count_596 = compute((1,), UInt(32)) {
                                      count_596[x] = 8192
                                    }

                                    src_addr_597 = compute((1,), UInt(32)) {
                                      src_addr_597[x] = 0
                                    }

                                    dst_addr_598 = compute((1,), Int(34)) {
                                      dst_addr_598[x] = (cstore_spadaddr[0] + 0)
                                    }

                                    _addr_599 = compute((1,), UInt(32)) {
                                      _addr_599[x] = src_addr_597[0]
                                    }

                                    assert_cond_600 = compute((1,), UInt(1)) {
                                      assert_cond_600[x] = ((_addr_599[0] + count_596[0]) le 8192)
                                    }

                                    if (assert_cond_600[0] eq 0) {
                                      print(_addr_599[0], (_addr_599[0] + count_596[0]), 

Assertion failed {instruction.py:320,instruction.py:318,tile.py:856,mem.py:172,mem.py:106,hcl_ext.py:727}: RFfoo Mem.copyto exceeds memory size: addr=%d+size=%d > 8192

)
                                      while ((assert_cond_600[0] eq 0)) {
                                        assert_cond_600[0] = 0
                                      }
                                    }
                                    copyN_82 = compute((count_596[0],), None) {
                                      SPAD.alloc_c[(dst_addr_598[0] + i)] = RFfoo.alloc_c[bv_594[0], rv_595[0], (src_addr_597[0] + i)]
                                    }

                                    cstore_valid[0] = 1
                                    flags_break_46[0] = 1
                                  }
                                  else {
                                    assert_cond_601 = compute((1,), UInt(1)) {
                                      assert_cond_601[x] = 0
                                    }

                                    if (assert_cond_601[0] eq 0) {
                                      print_tensor(cstore_cycle)
                                      while ((assert_cond_601[0] eq 0)) {
                                        assert_cond_601[0] = 0
                                      }
                                    }
                                  }
                                }
                                else {
                                  if (inst_id_233[0] eq 11) {
                                    exe_inst_ce0.cetiles.Mtile.UC_move = compute((1,), Struct(OrderedDict([('opcode', UInt(6)), ('__rsrv6__', UInt(1)), ('res', UInt(9)), ('a', UInt(9)), ('__rsrv__', UInt(103))]))) {
                                      exe_inst_ce0.cetiles.Mtile.UC_move[x] = execute_inst_247[0]
                                    }

                                    rfaddr_603 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                      rfaddr_603[x] = exe_inst_ce0.cetiles.Mtile.UC_move[0].2
                                    }

                                    bv_604 = compute((1,), UInt(3)) {
                                      bv_604[x] = (uint2 rfaddr_603[0].1 : UInt(2))
                                    }

                                    rv_605 = compute((1,), UInt(8)) {
                                      rv_605[x] = (uint7 rfaddr_603[0].0 : UInt(7))
                                    }

                                    rfaddr_606 = compute((1,), Struct(OrderedDict([('addr', UInt(7)), ('bank', UInt(2))]))) {
                                      rfaddr_606[x] = exe_inst_ce0.cetiles.Mtile.UC_move[0].3
                                    }

                                    bv_607 = compute((1,), UInt(3)) {
                                      bv_607[x] = (uint2 rfaddr_606[0].1 : UInt(2))
                                    }

                                    rv_608 = compute((1,), UInt(8)) {
                                      rv_608[x] = (uint7 rfaddr_606[0].0 : UInt(7))
                                    }

                                    bflyfn_83 = compute((8192,), None) {
                                      _a_609 = compute((1,), UInt(64)) {
                                        _a_609[x] = RFfoo.alloc_c[bv_607[0], rv_608[0], i]
                                      }

                                      _b_610 = compute((1,), UInt(64)) {
                                        _b_610[x] = 0
                                      }

                                      _w_611 = compute((1,), UInt(64)) {
                                        _w_611[x] = 0
                                      }

                                      _q_612 = compute((1,), UInt(64)) {
                                        _q_612[x] = 4294967295
                                      }

                                      RFfoo.alloc_c[bv_604[0], rv_605[0], i] = ((_a_609[0] + _b_610[0]) % _q_612[0])
                                    }

                                  }
                                  else {
                                    print(0, Invalid instruction : 0x)
                                    print(execute_inst_247[0][64:127], %016lx)
                                    print(execute_inst_247[0][0:63], %016lx)
                                    print(0, 
)
                                    assert_cond_613 = compute((1,), UInt(1)) {
                                      assert_cond_613[x] = 0
                                    }

                                    if (assert_cond_613[0] eq 0) {
                                      print(0, 

Assertion failed {instruction.py:320,instruction.py:309,hcl_ext.py:727}: ce0.cetiles.Mtile.UC.decode Invalid instruction

)
                                      while ((assert_cond_613[0] eq 0)) {
                                        assert_cond_613[0] = 0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            latstalled_52[0] = 0
            if (inst_lat_231[0] ne 0) {
              flags_break_46[0] = 1
            }
            if (flags_stall_44[0] eq 0) {
              tele_inst_count_53[0] = (tele_inst_count_53[0] + 1)
              inst_addr_49[0] = inst_naddr_50[0]
              flags_stalled_45[0] = 0
            }
            if (addr_top[0] eq inst_naddr_50[0]) {
              addr_stop_48[0] = 1
              flags_break_46[0] = 1
            }
          }
          else {
            latency_count_51[0] = (inst_lat_231[0] - 2)
            tele_latstall_count_55[0] = (tele_latstall_count_55[0] + 1)
            latstalled_52[0] = 1
            flags_break_46[0] = 1
          }
        }
        else {
          assert_cond_614 = compute((1,), UInt(1)) {
            assert_cond_614[x] = (latstalled_52[0] eq 1)
          }

          if (assert_cond_614[0] eq 0) {
            print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:189,uController.py:213,hcl_ext.py:727}: latency countdown but not latstalled?

)
            while ((assert_cond_614[0] eq 0)) {
              assert_cond_614[0] = 0
            }
          }
          latency_count_51[0] = (latency_count_51[0] - 1)
          tele_latstall_count_55[0] = (tele_latstall_count_55[0] + 1)
          latstalled_52[0] = 1
          flags_break_46[0] = 1
        }
      }
      if (addr_stop_48[0] ne 0) {
        flags_active_42[0] = 0
      }
    }
    else {
      if (uc_start_delay[0] eq 1) {
        assert_cond_615 = compute((1,), UInt(1)) {
          assert_cond_615[x] = (flags_active_42[0] eq 0)
        }

        if (assert_cond_615[0] eq 0) {
          print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,tile.py:194,uController.py:263,hcl_ext.py:727}: ce0.cetiles.Mtile.UC: uController already/still active?

)
          while ((assert_cond_615[0] eq 0)) {
            assert_cond_615[0] = 0
          }
        }
        flags_active_42[0] = 0
        flags_halt_43[0] = 0
        flags_stall_44[0] = 0
        flags_stalled_45[0] = 0
        flags_break_46[0] = 0
        count_stop_47[0] = 0
        addr_stop_48[0] = 0
        inst_addr_49[0] = 0
        inst_naddr_50[0] = 0
        latency_count_51[0] = 0
        latstalled_52[0] = 0
        inst_addr_49[0] = 0
        flags_active_42[0] = 1
      }
      uc_start_delay[0] = (uc_start_delay[0] - 1)
    }
    flags_stall_58[0] = 0
    flags_break_60[0] = 0
    count_stop_61[0] = 0
    addr_stop_62[0] = 0
    while_cont_616 = compute((1,), UInt(1)) {
      while_cont_616[x] = 1
    }

    while ((while_cont_616[0] ne 0)) {
      assert_cond_617 = compute((1,), UInt(1)) {
        assert_cond_617[x] = (((0 || (uint1 (latstalled_66[0] eq 1) : UInt(1))) || (uint1 (latency_count_65[0] eq 0) : UInt(1))) ne 0)
      }

      if (assert_cond_617[0] eq 0) {
        print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:153,hcl_ext.py:727}: 

)
        while ((assert_cond_617[0] eq 0)) {
          assert_cond_617[0] = 0
        }
      }
      if (latency_count_65[0] eq 0) {
        _cur_address_618 = compute((1,), UInt(32)) {
          _cur_address_618[x] = inst_addr_63[0]
        }

        inst_naddr_64[0] = (inst_addr_63[0] + 2)
        inst_619 = compute((1,), UInt(64)) {
          inst_619[x] = 0
        }

        read_addr_620 = compute((1,), Int(34)) {
          read_addr_620[x] = (inst_addr_63[0] + 0)
        }

        _addr_621 = compute((1,), Int(34)) {
          _addr_621[x] = read_addr_620[0]
        }

        assert_cond_622 = compute((1,), UInt(1)) {
          assert_cond_622[x] = ((_addr_621[0] + 1) le 33554432)
        }

        if (assert_cond_622[0] eq 0) {
          print(_addr_621[0], (_addr_621[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_622[0] eq 0)) {
            assert_cond_622[0] = 0
          }
        }
        Mem.read_c_84 = compute((1,), UInt(32)) {
          Mem.read_c_84[i] = hbm[(read_addr_620[0] + i)]
        }

        inst_619[0] = ((inst_619[0] << 32) | Mem.read_c_84[0])
        read_addr_623 = compute((1,), Int(34)) {
          read_addr_623[x] = (inst_addr_63[0] + 1)
        }

        _addr_624 = compute((1,), Int(34)) {
          _addr_624[x] = read_addr_623[0]
        }

        assert_cond_625 = compute((1,), UInt(1)) {
          assert_cond_625[x] = ((_addr_624[0] + 1) le 33554432)
        }

        if (assert_cond_625[0] eq 0) {
          print(_addr_624[0], (_addr_624[0] + 1), 

Assertion failed {soc.py:60,hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:157,instruction.py:244,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: HBM Mem.read exceeds memory size: addr=%d+size=%d > 33554432

)
          while ((assert_cond_625[0] eq 0)) {
            assert_cond_625[0] = 0
          }
        }
        Mem.read_c_85 = compute((1,), UInt(32)) {
          Mem.read_c_85[i] = hbm[(read_addr_623[0] + i)]
        }

        inst_619[0] = ((inst_619[0] << 32) | Mem.read_c_85[0])
        inst_lat_626 = compute((1,), UInt(32)) {
          inst_lat_626[x] = 0
        }

        decode_inst_627 = compute((1,), UInt(64)) {
          decode_inst_627[x] = inst_619[0]
        }

        inst_id_628 = compute((1,), UInt(16)) {
          inst_id_628[x] = 0
        }

        dec_inst_halt = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('__rsrv__', UInt(60))]))) {
          dec_inst_halt[x] = decode_inst_627[0]
        }

        if (1 && (uint1 (dec_inst_halt[0].0 eq (uint4 0 : UInt(4))) : UInt(1))) {
          inst_id_628[0] = 0
          inst_lat_626[0] = 0
        }
        else {
          dec_inst_cestart = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('ce', UInt(4)), ('__rsrv__', UInt(56))]))) {
            dec_inst_cestart[x] = decode_inst_627[0]
          }

          if (1 && (uint1 (dec_inst_cestart[0].0 eq (uint4 1 : UInt(4))) : UInt(1))) {
            inst_id_628[0] = 1
            inst_lat_626[0] = 0
          }
          else {
            dec_inst_cewait = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('ce', UInt(4)), ('__rsrv__', UInt(56))]))) {
              dec_inst_cewait[x] = decode_inst_627[0]
            }

            if (1 && (uint1 (dec_inst_cewait[0].0 eq (uint4 2 : UInt(4))) : UInt(1))) {
              inst_id_628[0] = 2
              inst_lat_626[0] = 0
            }
            else {
              assert_cond_632 = compute((1,), UInt(1)) {
                assert_cond_632[x] = 0
              }

              if (assert_cond_632[0] eq 0) {
                print(decode_inst_627[0], _cur_address_618[0], 

Assertion failed {hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:162,instruction.py:296,instruction.py:294,instruction.py:265,hcl_ext.py:727}: 

proc.UC.decode Invalid instruction (%d) at address %d


)
                while ((assert_cond_632[0] eq 0)) {
                  assert_cond_632[0] = 0
                }
              }
              inst_id_628[0] = 3
            }
          }
        }
        if (((0 || (uint1 (inst_lat_626[0] le 1) : UInt(1))) || (uint1 (latstalled_66[0] eq 1) : UInt(1))) ne 0) {
          execute_inst_633 = compute((1,), UInt(64)) {
            execute_inst_633[x] = inst_619[0]
          }

          if (inst_id_628[0] eq 0) {
            exe_inst_proc.UC_halt = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('__rsrv__', UInt(60))]))) {
              exe_inst_proc.UC_halt[x] = execute_inst_633[0]
            }

            flags_halt_57[0] = 1
            flags_active_56[0] = 0
            flags_break_60[0] = 1
          }
          else {
            if (inst_id_628[0] eq 1) {
              exe_inst_proc.UC_cestart = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('ce', UInt(4)), ('__rsrv__', UInt(56))]))) {
                exe_inst_proc.UC_cestart[x] = execute_inst_633[0]
              }

              assert_cond_636 = compute((1,), UInt(1)) {
                assert_cond_636[x] = (exe_inst_proc.UC_cestart[0].1 lt 1)
              }

              if (assert_cond_636[0] eq 0) {
                print(exe_inst_proc.UC_cestart[0].1, 

Assertion failed {hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,proc.py:111,proc.py:101,hcl_ext.py:727}: Invalid ce_index=%d

)
                while ((assert_cond_636[0] eq 0)) {
                  assert_cond_636[0] = 0
                }
              }
              if (exe_inst_proc.UC_cestart[0].1 eq 0) {
                read_addr_637 = compute((1,), UInt(32)) {
                  read_addr_637[x] = 1
                }

                _addr_638 = compute((1,), UInt(32)) {
                  _addr_638[x] = read_addr_637[0]
                }

                assert_cond_639 = compute((1,), UInt(1)) {
                  assert_cond_639[x] = ((_addr_638[0] + 1) le 10)
                }

                if (assert_cond_639[0] eq 0) {
                  print(_addr_638[0], (_addr_638[0] + 1), 

Assertion failed {instruction.py:318,proc.py:111,proc.py:104,proc.py:111,compute_engine.py:45,mfetch.py:126,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: Sysreg Mem.read exceeds memory size: addr=%d+size=%d > 10

)
                  while ((assert_cond_639[0] eq 0)) {
                    assert_cond_639[0] = 0
                  }
                }
                Mem.read_c_86 = compute((1,), UInt(64)) {
                  Mem.read_c_86[i] = sysreg[(read_addr_637[0] + i)]
                }

                assert_cond_640 = compute((1,), UInt(1)) {
                  assert_cond_640[x] = (flags_active[0] eq 0)
                }

                if (assert_cond_640[0] eq 0) {
                  print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,proc.py:111,proc.py:104,proc.py:111,compute_engine.py:45,mfetch.py:127,uController.py:263,hcl_ext.py:727}: ce0.mf.UC: uController already/still active?

)
                  while ((assert_cond_640[0] eq 0)) {
                    assert_cond_640[0] = 0
                  }
                }
                flags_active[0] = 0
                flags_halt[0] = 0
                flags_stall[0] = 0
                flags_stalled[0] = 0
                flags_break[0] = 0
                count_stop[0] = 0
                addr_stop[0] = 0
                inst_addr[0] = 0
                inst_naddr[0] = 0
                latency_count[0] = 0
                latstalled[0] = 0
                inst_addr[0] = Mem.read_c_86[0]
                flags_active[0] = 1
                read_addr_641 = compute((1,), UInt(32)) {
                  read_addr_641[x] = 2
                }

                _addr_642 = compute((1,), UInt(32)) {
                  _addr_642[x] = read_addr_641[0]
                }

                assert_cond_643 = compute((1,), UInt(1)) {
                  assert_cond_643[x] = ((_addr_642[0] + 1) le 10)
                }

                if (assert_cond_643[0] eq 0) {
                  print(_addr_642[0], (_addr_642[0] + 1), 

Assertion failed {instruction.py:318,proc.py:111,proc.py:104,proc.py:111,compute_engine.py:46,cfetch.py:219,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: Sysreg Mem.read exceeds memory size: addr=%d+size=%d > 10

)
                  while ((assert_cond_643[0] eq 0)) {
                    assert_cond_643[0] = 0
                  }
                }
                Mem.read_c_87 = compute((1,), UInt(64)) {
                  Mem.read_c_87[i] = sysreg[(read_addr_641[0] + i)]
                }

                assert_cond_644 = compute((1,), UInt(1)) {
                  assert_cond_644[x] = (flags_active_21[0] eq 0)
                }

                if (assert_cond_644[0] eq 0) {
                  print(0, 

Assertion failed {instruction.py:321,instruction.py:320,instruction.py:318,proc.py:111,proc.py:104,proc.py:111,compute_engine.py:46,cfetch.py:220,uController.py:263,hcl_ext.py:727}: ce0.cf.UC: uController already/still active?

)
                  while ((assert_cond_644[0] eq 0)) {
                    assert_cond_644[0] = 0
                  }
                }
                flags_active_21[0] = 0
                flags_halt_22[0] = 0
                flags_stall_23[0] = 0
                flags_stalled_24[0] = 0
                flags_break_25[0] = 0
                count_stop_26[0] = 0
                addr_stop_27[0] = 0
                inst_addr_28[0] = 0
                inst_naddr_29[0] = 0
                latency_count_30[0] = 0
                latstalled_31[0] = 0
                inst_addr_28[0] = Mem.read_c_87[0]
                flags_active_21[0] = 1
              }
            }
            else {
              if (inst_id_628[0] eq 2) {
                exe_inst_proc.UC_cewait = compute((1,), Struct(OrderedDict([('opcode', UInt(4)), ('ce', UInt(4)), ('__rsrv__', UInt(56))]))) {
                  exe_inst_proc.UC_cewait[x] = execute_inst_633[0]
                }

                assert_cond_646 = compute((1,), UInt(1)) {
                  assert_cond_646[x] = (exe_inst_proc.UC_cewait[0].1 lt 1)
                }

                if (assert_cond_646[0] eq 0) {
                  print(exe_inst_proc.UC_cewait[0].1, 

Assertion failed {hcl_ext.py:855,proc.py:80,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:318,proc.py:123,proc.py:101,hcl_ext.py:727}: Invalid ce_index=%d

)
                  while ((assert_cond_646[0] eq 0)) {
                    assert_cond_646[0] = 0
                  }
                }
                if (exe_inst_proc.UC_cewait[0].1 eq 0) {
                  if ((0 || (uint1 (flags_active[0] ne 0) : UInt(1))) || (uint1 (flags_active_21[0] ne 0) : UInt(1))) {
                    tele_stall_count_68[0] = (tele_stall_count_68[0] + 1)
                    flags_stall_58[0] = 1
                    flags_stalled_59[0] = 1
                    flags_break_60[0] = 1
                  }
                  else {
                  }
                }
              }
              else {
                print(0, Invalid instruction : 0x)
                print(execute_inst_633[0], %016lx)
                print(0, 
)
                assert_cond_647 = compute((1,), UInt(1)) {
                  assert_cond_647[x] = 0
                }

                if (assert_cond_647[0] eq 0) {
                  print(0, 

Assertion failed {hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:172,instruction.py:321,instruction.py:320,instruction.py:309,hcl_ext.py:727}: proc.UC.decode Invalid instruction

)
                  while ((assert_cond_647[0] eq 0)) {
                    assert_cond_647[0] = 0
                  }
                }
              }
            }
          }
          latstalled_66[0] = 0
          if (inst_lat_626[0] ne 0) {
            flags_break_60[0] = 1
          }
          if (flags_stall_58[0] eq 0) {
            tele_inst_count_67[0] = (tele_inst_count_67[0] + 1)
            inst_addr_63[0] = inst_naddr_64[0]
            flags_stalled_59[0] = 0
          }
        }
        else {
          latency_count_65[0] = (inst_lat_626[0] - 2)
          tele_latstall_count_69[0] = (tele_latstall_count_69[0] + 1)
          latstalled_66[0] = 1
          flags_break_60[0] = 1
        }
      }
      else {
        assert_cond_648 = compute((1,), UInt(1)) {
          assert_cond_648[x] = (latstalled_66[0] eq 1)
        }

        if (assert_cond_648[0] eq 0) {
          print(0, 

Assertion failed {hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:865,hcl_ext.py:855,proc.py:80,uController.py:213,hcl_ext.py:727}: latency countdown but not latstalled?

)
          while ((assert_cond_648[0] eq 0)) {
            assert_cond_648[0] = 0
          }
        }
        latency_count_65[0] = (latency_count_65[0] - 1)
        tele_latstall_count_69[0] = (tele_latstall_count_69[0] + 1)
        latstalled_66[0] = 1
        flags_break_60[0] = 1
      }
    }
    if (flag_ntt[0] ne 0) {
      ntt_out_swizzle_ot = compute((64,), None) {
        ot64 = compute((64,), None) {
          read_addr_649 = compute((1,), Int(65)) {
            read_addr_649[x] = ((i * 128) + j)
          }

          _addr_650 = compute((1,), Int(65)) {
            _addr_650[x] = read_addr_649[0]
          }

          assert_cond_651 = compute((1,), UInt(1)) {
            assert_cond_651[x] = ((_addr_650[0] + 1) le 8192)
          }

          if (assert_cond_651[0] eq 0) {
            print(_addr_650[0], (_addr_650[0] + 1), 

Assertion failed {cetiles.py:114,cetiles.py:111,operation.py:370,operation.py:322,cetiles.py:111,cetiles.py:110,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: nttdataouttop Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_651[0] eq 0)) {
              assert_cond_651[0] = 0
            }
          }
          Mem.read_c_90 = compute((1,), UInt(32)) {
            Mem.read_c_90[i] = nttdataouttop.alloc_c[(read_addr_649[0] + i)]
          }

          write_addr_652 = compute((1,), Int(66)) {
            write_addr_652[x] = ((0 + (i * 64)) + j)
          }

          _addr_653 = compute((1,), Int(66)) {
            _addr_653[x] = write_addr_652[0]
          }

          assert_cond_654 = compute((1,), UInt(1)) {
            assert_cond_654[x] = ((_addr_653[0] + 1) le 8192)
          }

          if (assert_cond_654[0] eq 0) {
            print(_addr_653[0], (_addr_653[0] + 1), 

Assertion failed {cetiles.py:114,cetiles.py:111,operation.py:370,operation.py:322,cetiles.py:111,cetiles.py:110,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdataintop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_654[0] eq 0)) {
              assert_cond_654[0] = 0
            }
          }
          nttdataintop.alloc_c[write_addr_652[0]] = Mem.read_c_90[0]
        }

        ot64_91 = compute((64,), None) {
          read_addr_655 = compute((1,), Int(66)) {
            read_addr_655[x] = (((i * 128) + 64) + j)
          }

          _addr_656 = compute((1,), Int(66)) {
            _addr_656[x] = read_addr_655[0]
          }

          assert_cond_657 = compute((1,), UInt(1)) {
            assert_cond_657[x] = ((_addr_656[0] + 1) le 8192)
          }

          if (assert_cond_657[0] eq 0) {
            print(_addr_656[0], (_addr_656[0] + 1), 

Assertion failed {cetiles.py:114,cetiles.py:112,operation.py:370,operation.py:322,cetiles.py:112,cetiles.py:110,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: nttdataouttop Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_657[0] eq 0)) {
              assert_cond_657[0] = 0
            }
          }
          Mem.read_c_92 = compute((1,), UInt(32)) {
            Mem.read_c_92[i] = nttdataouttop.alloc_c[(read_addr_655[0] + i)]
          }

          write_addr_658 = compute((1,), Int(66)) {
            write_addr_658[x] = ((0 + (i * 64)) + j)
          }

          _addr_659 = compute((1,), Int(66)) {
            _addr_659[x] = write_addr_658[0]
          }

          assert_cond_660 = compute((1,), UInt(1)) {
            assert_cond_660[x] = ((_addr_659[0] + 1) le 8192)
          }

          if (assert_cond_660[0] eq 0) {
            print(_addr_659[0], (_addr_659[0] + 1), 

Assertion failed {cetiles.py:114,cetiles.py:112,operation.py:370,operation.py:322,cetiles.py:112,cetiles.py:110,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdatainbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_660[0] eq 0)) {
              assert_cond_660[0] = 0
            }
          }
          nttdatainbot.alloc_c[write_addr_658[0]] = Mem.read_c_92[0]
        }

      }

      ntt_out_swizzle_ob = compute((64,), None) {
        ot64_94 = compute((64,), None) {
          read_addr_661 = compute((1,), Int(65)) {
            read_addr_661[x] = ((i * 128) + j)
          }

          _addr_662 = compute((1,), Int(65)) {
            _addr_662[x] = read_addr_661[0]
          }

          assert_cond_663 = compute((1,), UInt(1)) {
            assert_cond_663[x] = ((_addr_662[0] + 1) le 8192)
          }

          if (assert_cond_663[0] eq 0) {
            print(_addr_662[0], (_addr_662[0] + 1), 

Assertion failed {cetiles.py:115,cetiles.py:111,operation.py:370,operation.py:322,cetiles.py:111,cetiles.py:110,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: nttdataoutbot Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_663[0] eq 0)) {
              assert_cond_663[0] = 0
            }
          }
          Mem.read_c_95 = compute((1,), UInt(32)) {
            Mem.read_c_95[i] = nttdataoutbot.alloc_c[(read_addr_661[0] + i)]
          }

          write_addr_664 = compute((1,), Int(66)) {
            write_addr_664[x] = ((4096 + (i * 64)) + j)
          }

          _addr_665 = compute((1,), Int(66)) {
            _addr_665[x] = write_addr_664[0]
          }

          assert_cond_666 = compute((1,), UInt(1)) {
            assert_cond_666[x] = ((_addr_665[0] + 1) le 8192)
          }

          if (assert_cond_666[0] eq 0) {
            print(_addr_665[0], (_addr_665[0] + 1), 

Assertion failed {cetiles.py:115,cetiles.py:111,operation.py:370,operation.py:322,cetiles.py:111,cetiles.py:110,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdataintop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_666[0] eq 0)) {
              assert_cond_666[0] = 0
            }
          }
          nttdataintop.alloc_c[write_addr_664[0]] = Mem.read_c_95[0]
        }

        ot64_96 = compute((64,), None) {
          read_addr_667 = compute((1,), Int(66)) {
            read_addr_667[x] = (((i * 128) + 64) + j)
          }

          _addr_668 = compute((1,), Int(66)) {
            _addr_668[x] = read_addr_667[0]
          }

          assert_cond_669 = compute((1,), UInt(1)) {
            assert_cond_669[x] = ((_addr_668[0] + 1) le 8192)
          }

          if (assert_cond_669[0] eq 0) {
            print(_addr_668[0], (_addr_668[0] + 1), 

Assertion failed {cetiles.py:115,cetiles.py:112,operation.py:370,operation.py:322,cetiles.py:112,cetiles.py:110,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: nttdataoutbot Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_669[0] eq 0)) {
              assert_cond_669[0] = 0
            }
          }
          Mem.read_c_97 = compute((1,), UInt(32)) {
            Mem.read_c_97[i] = nttdataoutbot.alloc_c[(read_addr_667[0] + i)]
          }

          write_addr_670 = compute((1,), Int(66)) {
            write_addr_670[x] = ((4096 + (i * 64)) + j)
          }

          _addr_671 = compute((1,), Int(66)) {
            _addr_671[x] = write_addr_670[0]
          }

          assert_cond_672 = compute((1,), UInt(1)) {
            assert_cond_672[x] = ((_addr_671[0] + 1) le 8192)
          }

          if (assert_cond_672[0] eq 0) {
            print(_addr_671[0], (_addr_671[0] + 1), 

Assertion failed {cetiles.py:115,cetiles.py:112,operation.py:370,operation.py:322,cetiles.py:112,cetiles.py:110,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: nttdatainbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_672[0] eq 0)) {
              assert_cond_672[0] = 0
            }
          }
          nttdatainbot.alloc_c[write_addr_670[0]] = Mem.read_c_97[0]
        }

      }

    }
    else if ((flag_intt[0] ne 0)) {
      intt_out_swizzle = compute((128,), None) {
        nttin_even_odd_arf_99 = compute((32,), None) {
          read_addr_673 = compute((1,), Int(66)) {
            read_addr_673[x] = (((i * 64) + 0) + j)
          }

          _addr_674 = compute((1,), Int(66)) {
            _addr_674[x] = read_addr_673[0]
          }

          assert_cond_675 = compute((1,), UInt(1)) {
            assert_cond_675[x] = ((_addr_674[0] + 1) le 8192)
          }

          if (assert_cond_675[0] eq 0) {
            print(_addr_674[0], (_addr_674[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:135,operation.py:370,operation.py:322,cetiles.py:135,cetiles.py:133,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: inttdataouttop Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_675[0] eq 0)) {
              assert_cond_675[0] = 0
            }
          }
          Mem.read_c_100 = compute((1,), UInt(32)) {
            Mem.read_c_100[i] = inttdataouttop.alloc_c[(read_addr_673[0] + i)]
          }

          write_addr_676 = compute((1,), Int(65)) {
            write_addr_676[x] = ((i * 64) + (2 * j))
          }

          _addr_677 = compute((1,), Int(65)) {
            _addr_677[x] = write_addr_676[0]
          }

          assert_cond_678 = compute((1,), UInt(1)) {
            assert_cond_678[x] = ((_addr_677[0] + 1) le 8192)
          }

          if (assert_cond_678[0] eq 0) {
            print(_addr_677[0], (_addr_677[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:135,operation.py:370,operation.py:322,cetiles.py:135,cetiles.py:133,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdataintop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_678[0] eq 0)) {
              assert_cond_678[0] = 0
            }
          }
          inttdataintop.alloc_c[write_addr_676[0]] = Mem.read_c_100[0]
          read_addr_679 = compute((1,), Int(66)) {
            read_addr_679[x] = (((i * 64) + 0) + j)
          }

          _addr_680 = compute((1,), Int(66)) {
            _addr_680[x] = read_addr_679[0]
          }

          assert_cond_681 = compute((1,), UInt(1)) {
            assert_cond_681[x] = ((_addr_680[0] + 1) le 8192)
          }

          if (assert_cond_681[0] eq 0) {
            print(_addr_680[0], (_addr_680[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:135,operation.py:370,operation.py:322,cetiles.py:135,cetiles.py:134,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: inttdataoutbot Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_681[0] eq 0)) {
              assert_cond_681[0] = 0
            }
          }
          Mem.read_c_101 = compute((1,), UInt(32)) {
            Mem.read_c_101[i] = inttdataoutbot.alloc_c[(read_addr_679[0] + i)]
          }

          write_addr_682 = compute((1,), Int(66)) {
            write_addr_682[x] = (((i * 64) + (2 * j)) + 1)
          }

          _addr_683 = compute((1,), Int(66)) {
            _addr_683[x] = write_addr_682[0]
          }

          assert_cond_684 = compute((1,), UInt(1)) {
            assert_cond_684[x] = ((_addr_683[0] + 1) le 8192)
          }

          if (assert_cond_684[0] eq 0) {
            print(_addr_683[0], (_addr_683[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:135,operation.py:370,operation.py:322,cetiles.py:135,cetiles.py:134,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdataintop Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_684[0] eq 0)) {
              assert_cond_684[0] = 0
            }
          }
          inttdataintop.alloc_c[write_addr_682[0]] = Mem.read_c_101[0]
        }

        nttin_even_odd_brf_102 = compute((32,), None) {
          read_addr_685 = compute((1,), Int(66)) {
            read_addr_685[x] = (((i * 64) + 32) + j)
          }

          _addr_686 = compute((1,), Int(66)) {
            _addr_686[x] = read_addr_685[0]
          }

          assert_cond_687 = compute((1,), UInt(1)) {
            assert_cond_687[x] = ((_addr_686[0] + 1) le 8192)
          }

          if (assert_cond_687[0] eq 0) {
            print(_addr_686[0], (_addr_686[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:136,operation.py:370,operation.py:322,cetiles.py:136,cetiles.py:133,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: inttdataouttop Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_687[0] eq 0)) {
              assert_cond_687[0] = 0
            }
          }
          Mem.read_c_103 = compute((1,), UInt(32)) {
            Mem.read_c_103[i] = inttdataouttop.alloc_c[(read_addr_685[0] + i)]
          }

          write_addr_688 = compute((1,), Int(65)) {
            write_addr_688[x] = ((i * 64) + (2 * j))
          }

          _addr_689 = compute((1,), Int(65)) {
            _addr_689[x] = write_addr_688[0]
          }

          assert_cond_690 = compute((1,), UInt(1)) {
            assert_cond_690[x] = ((_addr_689[0] + 1) le 8192)
          }

          if (assert_cond_690[0] eq 0) {
            print(_addr_689[0], (_addr_689[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:136,operation.py:370,operation.py:322,cetiles.py:136,cetiles.py:133,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdatainbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_690[0] eq 0)) {
              assert_cond_690[0] = 0
            }
          }
          inttdatainbot.alloc_c[write_addr_688[0]] = Mem.read_c_103[0]
          read_addr_691 = compute((1,), Int(66)) {
            read_addr_691[x] = (((i * 64) + 32) + j)
          }

          _addr_692 = compute((1,), Int(66)) {
            _addr_692[x] = read_addr_691[0]
          }

          assert_cond_693 = compute((1,), UInt(1)) {
            assert_cond_693[x] = ((_addr_692[0] + 1) le 8192)
          }

          if (assert_cond_693[0] eq 0) {
            print(_addr_692[0], (_addr_692[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:136,operation.py:370,operation.py:322,cetiles.py:136,cetiles.py:134,mem.py:113,mem.py:135,mem.py:106,hcl_ext.py:727}: inttdataoutbot Mem.read exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_693[0] eq 0)) {
              assert_cond_693[0] = 0
            }
          }
          Mem.read_c_104 = compute((1,), UInt(32)) {
            Mem.read_c_104[i] = inttdataoutbot.alloc_c[(read_addr_691[0] + i)]
          }

          write_addr_694 = compute((1,), Int(66)) {
            write_addr_694[x] = (((i * 64) + (2 * j)) + 1)
          }

          _addr_695 = compute((1,), Int(66)) {
            _addr_695[x] = write_addr_694[0]
          }

          assert_cond_696 = compute((1,), UInt(1)) {
            assert_cond_696[x] = ((_addr_695[0] + 1) le 8192)
          }

          if (assert_cond_696[0] eq 0) {
            print(_addr_695[0], (_addr_695[0] + 1), 

Assertion failed {operation.py:322,cetiles.py:136,operation.py:370,operation.py:322,cetiles.py:136,cetiles.py:134,mem.py:116,mem.py:142,mem.py:106,hcl_ext.py:727}: inttdatainbot Mem.write exceeds memory size: addr=%d+size=%d > 8192

)
            while ((assert_cond_696[0] eq 0)) {
              assert_cond_696[0] = 0
            }
          }
          inttdatainbot.alloc_c[write_addr_694[0]] = Mem.read_c_104[0]
        }

      }

    }
    sys_steps[0] = (sys_steps[0] + 1)
    assert_cond_697 = compute((1,), UInt(1)) {
      assert_cond_697[x] = (sys_steps[0] lt 100000)
    }

    if (assert_cond_697[0] eq 0) {
      print(sys_steps[0], 

Assertion failed {top.py:58,soc.py:132,soc.py:62,hcl_ext.py:401,schedule.py:86,schedule.py:73,schedule.py:35,soc.py:60,hcl_ext.py:868,hcl_ext.py:727}: Reached max step=%d ... aborting

)
      while ((assert_cond_697[0] eq 0)) {
        assert_cond_697[0] = 0
      }
    }
  }
  print(tele_inst_count[0], tele_stall_count[0], ce0.mf uC instructions=%d stalls=%d
)
  print(tele_inst_count_32[0], tele_stall_count_33[0], ce0.cf uC instructions=%d stalls=%d
)
  print(tele_inst_count_53[0], tele_stall_count_54[0], ce0.cetiles.Mtile uC instructions=%d stalls=%d
)
  print(tele_inst_count_67[0], tele_stall_count_68[0], proc uC instructions=%d stalls=%d
)
  print(sys_steps[0], Total steps: %d
)
  return 
}