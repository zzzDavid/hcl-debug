// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel_HH_
#define _kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > A_V_address0;
    sc_out< sc_logic > A_V_ce0;
    sc_in< sc_lv<32> > A_V_q0;
    sc_out< sc_lv<4> > x_V_address0;
    sc_out< sc_logic > x_V_ce0;
    sc_in< sc_lv<32> > x_V_q0;
    sc_out< sc_lv<4> > y_V_address0;
    sc_out< sc_logic > y_V_ce0;
    sc_out< sc_logic > y_V_we0;
    sc_out< sc_lv<32> > y_V_d0;


    // Module declarations
    kernel(sc_module_name name);
    SC_HAS_PROCESS(kernel);

    ~kernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_86_p2;
    sc_signal< sc_lv<5> > i_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln7_fu_92_p1;
    sc_signal< sc_lv<64> > zext_ln7_reg_141;
    sc_signal< sc_lv<1> > icmp_ln5_fu_80_p2;
    sc_signal< sc_lv<32> > p_Val2_s_reg_156;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > sh_V_1_fu_98_p2;
    sc_signal< sc_lv<32> > sh_V_1_reg_162;
    sc_signal< sc_lv<32> > A_V_load_reg_167;
    sc_signal< sc_lv<5> > i_0_reg_69;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > p_Result_s_fu_104_p3;
    sc_signal< sc_lv<32> > r_V_fu_111_p2;
    sc_signal< sc_lv<32> > r_V_1_fu_115_p2;
    sc_signal< sc_lv<32> > select_ln778_fu_119_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_V_address0();
    void thread_A_V_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_86_p2();
    void thread_icmp_ln5_fu_80_p2();
    void thread_p_Result_s_fu_104_p3();
    void thread_r_V_1_fu_115_p2();
    void thread_r_V_fu_111_p2();
    void thread_select_ln778_fu_119_p3();
    void thread_sh_V_1_fu_98_p2();
    void thread_x_V_address0();
    void thread_x_V_ce0();
    void thread_y_V_address0();
    void thread_y_V_ce0();
    void thread_y_V_d0();
    void thread_y_V_we0();
    void thread_zext_ln7_fu_92_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
