// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.742000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=115,HLS_SYN_LUT=374,HLS_VERSION=2019_2_1}" *)

module kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_V_address0,
        A_V_ce0,
        A_V_q0,
        x_V_address0,
        x_V_ce0,
        x_V_q0,
        y_V_address0,
        y_V_ce0,
        y_V_we0,
        y_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_V_address0;
output   A_V_ce0;
input  [31:0] A_V_q0;
output  [3:0] x_V_address0;
output   x_V_ce0;
input  [31:0] x_V_q0;
output  [3:0] y_V_address0;
output   y_V_ce0;
output   y_V_we0;
output  [31:0] y_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_V_ce0;
reg x_V_ce0;
reg y_V_ce0;
reg y_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_86_p2;
reg   [4:0] i_reg_136;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln7_fu_92_p1;
reg   [63:0] zext_ln7_reg_141;
wire   [0:0] icmp_ln5_fu_80_p2;
reg   [31:0] p_Val2_s_reg_156;
wire    ap_CS_fsm_state3;
wire   [31:0] sh_V_1_fu_98_p2;
reg   [31:0] sh_V_1_reg_162;
reg   [31:0] A_V_load_reg_167;
reg   [4:0] i_0_reg_69;
wire    ap_CS_fsm_state4;
wire   [0:0] p_Result_s_fu_104_p3;
wire   [31:0] r_V_fu_111_p2;
wire   [31:0] r_V_1_fu_115_p2;
wire   [31:0] select_ln778_fu_119_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_69 <= i_reg_136;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_69 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_V_load_reg_167 <= A_V_q0;
        p_Val2_s_reg_156 <= x_V_q0;
        sh_V_1_reg_162 <= sh_V_1_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_136 <= i_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln7_reg_141[4 : 0] <= zext_ln7_fu_92_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_V_ce0 = 1'b1;
    end else begin
        A_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_V_ce0 = 1'b1;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_V_ce0 = 1'b1;
    end else begin
        y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_V_we0 = 1'b1;
    end else begin
        y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_address0 = zext_ln7_fu_92_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_86_p2 = (i_0_reg_69 + 5'd1);

assign icmp_ln5_fu_80_p2 = ((i_0_reg_69 == 5'd16) ? 1'b1 : 1'b0);

assign p_Result_s_fu_104_p3 = p_Val2_s_reg_156[32'd31];

assign r_V_1_fu_115_p2 = A_V_load_reg_167 << p_Val2_s_reg_156;

assign r_V_fu_111_p2 = $signed(A_V_load_reg_167) >>> sh_V_1_reg_162;

assign select_ln778_fu_119_p3 = ((p_Result_s_fu_104_p3[0:0] === 1'b1) ? r_V_fu_111_p2 : r_V_1_fu_115_p2);

assign sh_V_1_fu_98_p2 = (32'd0 - x_V_q0);

assign x_V_address0 = zext_ln7_fu_92_p1;

assign y_V_address0 = zext_ln7_reg_141;

assign y_V_d0 = (A_V_load_reg_167 + select_ln778_fu_119_p3);

assign zext_ln7_fu_92_p1 = i_0_reg_69;

always @ (posedge ap_clk) begin
    zext_ln7_reg_141[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //kernel
