// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> kernel::ap_ST_fsm_state1 = "1";
const sc_lv<4> kernel::ap_ST_fsm_state2 = "10";
const sc_lv<4> kernel::ap_ST_fsm_state3 = "100";
const sc_lv<4> kernel::ap_ST_fsm_state4 = "1000";
const sc_lv<32> kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> kernel::ap_const_lv32_1 = "1";
const sc_lv<1> kernel::ap_const_lv1_0 = "0";
const sc_lv<32> kernel::ap_const_lv32_2 = "10";
const sc_lv<5> kernel::ap_const_lv5_0 = "00000";
const sc_lv<32> kernel::ap_const_lv32_3 = "11";
const sc_lv<5> kernel::ap_const_lv5_10 = "10000";
const sc_lv<5> kernel::ap_const_lv5_1 = "1";
const sc_lv<32> kernel::ap_const_lv32_1F = "11111";
const sc_lv<1> kernel::ap_const_lv1_1 = "1";
const bool kernel::ap_const_boolean_1 = true;

kernel::kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln7_fu_92_p1 );

    SC_METHOD(thread_A_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_80_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_80_p2 );

    SC_METHOD(thread_i_fu_86_p2);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_icmp_ln5_fu_80_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_p_Result_s_fu_104_p3);
    sensitive << ( p_Val2_s_reg_156 );

    SC_METHOD(thread_r_V_1_fu_115_p2);
    sensitive << ( p_Val2_s_reg_156 );
    sensitive << ( A_V_load_reg_167 );

    SC_METHOD(thread_r_V_fu_111_p2);
    sensitive << ( sh_V_1_reg_162 );
    sensitive << ( A_V_load_reg_167 );

    SC_METHOD(thread_select_ln778_fu_119_p3);
    sensitive << ( p_Result_s_fu_104_p3 );
    sensitive << ( r_V_fu_111_p2 );
    sensitive << ( r_V_1_fu_115_p2 );

    SC_METHOD(thread_sh_V_1_fu_98_p2);
    sensitive << ( x_V_q0 );

    SC_METHOD(thread_x_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln7_fu_92_p1 );

    SC_METHOD(thread_x_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_y_V_address0);
    sensitive << ( zext_ln7_reg_141 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_y_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_y_V_d0);
    sensitive << ( A_V_load_reg_167 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( select_ln778_fu_119_p3 );

    SC_METHOD(thread_y_V_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln7_fu_92_p1);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_80_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_V_address0, "(port)A_V_address0");
    sc_trace(mVcdFile, A_V_ce0, "(port)A_V_ce0");
    sc_trace(mVcdFile, A_V_q0, "(port)A_V_q0");
    sc_trace(mVcdFile, x_V_address0, "(port)x_V_address0");
    sc_trace(mVcdFile, x_V_ce0, "(port)x_V_ce0");
    sc_trace(mVcdFile, x_V_q0, "(port)x_V_q0");
    sc_trace(mVcdFile, y_V_address0, "(port)y_V_address0");
    sc_trace(mVcdFile, y_V_ce0, "(port)y_V_ce0");
    sc_trace(mVcdFile, y_V_we0, "(port)y_V_we0");
    sc_trace(mVcdFile, y_V_d0, "(port)y_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_86_p2, "i_fu_86_p2");
    sc_trace(mVcdFile, i_reg_136, "i_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln7_fu_92_p1, "zext_ln7_fu_92_p1");
    sc_trace(mVcdFile, zext_ln7_reg_141, "zext_ln7_reg_141");
    sc_trace(mVcdFile, icmp_ln5_fu_80_p2, "icmp_ln5_fu_80_p2");
    sc_trace(mVcdFile, p_Val2_s_reg_156, "p_Val2_s_reg_156");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sh_V_1_fu_98_p2, "sh_V_1_fu_98_p2");
    sc_trace(mVcdFile, sh_V_1_reg_162, "sh_V_1_reg_162");
    sc_trace(mVcdFile, A_V_load_reg_167, "A_V_load_reg_167");
    sc_trace(mVcdFile, i_0_reg_69, "i_0_reg_69");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, p_Result_s_fu_104_p3, "p_Result_s_fu_104_p3");
    sc_trace(mVcdFile, r_V_fu_111_p2, "r_V_fu_111_p2");
    sc_trace(mVcdFile, r_V_1_fu_115_p2, "r_V_1_fu_115_p2");
    sc_trace(mVcdFile, select_ln778_fu_119_p3, "select_ln778_fu_119_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kernel.hdltvin.dat");
    mHdltvoutHandle.open("kernel.hdltvout.dat");
}

kernel::~kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void kernel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_reg_69 = i_reg_136.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_69 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_V_load_reg_167 = A_V_q0.read();
        p_Val2_s_reg_156 = x_V_q0.read();
        sh_V_1_reg_162 = sh_V_1_fu_98_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_136 = i_fu_86_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln5_fu_80_p2.read(), ap_const_lv1_0))) {
        zext_ln7_reg_141 = zext_ln7_fu_92_p1.read();
    }
}

void kernel::thread_A_V_address0() {
    A_V_address0 =  (sc_lv<4>) (zext_ln7_fu_92_p1.read());
}

void kernel::thread_A_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        A_V_ce0 = ap_const_logic_1;
    } else {
        A_V_ce0 = ap_const_logic_0;
    }
}

void kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void kernel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_80_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_80_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel::thread_i_fu_86_p2() {
    i_fu_86_p2 = (!i_0_reg_69.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_69.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void kernel::thread_icmp_ln5_fu_80_p2() {
    icmp_ln5_fu_80_p2 = (!i_0_reg_69.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_69.read() == ap_const_lv5_10);
}

void kernel::thread_p_Result_s_fu_104_p3() {
    p_Result_s_fu_104_p3 = p_Val2_s_reg_156.read().range(31, 31);
}

void kernel::thread_r_V_1_fu_115_p2() {
    r_V_1_fu_115_p2 = (!p_Val2_s_reg_156.read().is_01())? sc_lv<32>(): A_V_load_reg_167.read() << (unsigned short)p_Val2_s_reg_156.read().to_uint();
}

void kernel::thread_r_V_fu_111_p2() {
    r_V_fu_111_p2 = (!A_V_load_reg_167.read().is_01() || !sh_V_1_reg_162.read().is_01())? sc_lv<32>(): sc_bigint<32>(A_V_load_reg_167.read()) >> (unsigned short)sh_V_1_reg_162.read().to_uint();
}

void kernel::thread_select_ln778_fu_119_p3() {
    select_ln778_fu_119_p3 = (!p_Result_s_fu_104_p3.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_fu_104_p3.read()[0].to_bool())? r_V_fu_111_p2.read(): r_V_1_fu_115_p2.read());
}

void kernel::thread_sh_V_1_fu_98_p2() {
    sh_V_1_fu_98_p2 = (!ap_const_lv32_0.is_01() || !x_V_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(x_V_q0.read()));
}

void kernel::thread_x_V_address0() {
    x_V_address0 =  (sc_lv<4>) (zext_ln7_fu_92_p1.read());
}

void kernel::thread_x_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_V_ce0 = ap_const_logic_1;
    } else {
        x_V_ce0 = ap_const_logic_0;
    }
}

void kernel::thread_y_V_address0() {
    y_V_address0 =  (sc_lv<4>) (zext_ln7_reg_141.read());
}

void kernel::thread_y_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        y_V_ce0 = ap_const_logic_1;
    } else {
        y_V_ce0 = ap_const_logic_0;
    }
}

void kernel::thread_y_V_d0() {
    y_V_d0 = (!A_V_load_reg_167.read().is_01() || !select_ln778_fu_119_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(A_V_load_reg_167.read()) + sc_biguint<32>(select_ln778_fu_119_p3.read()));
}

void kernel::thread_y_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        y_V_we0 = ap_const_logic_1;
    } else {
        y_V_we0 = ap_const_logic_0;
    }
}

void kernel::thread_zext_ln7_fu_92_p1() {
    zext_ln7_fu_92_p1 = esl_zext<64,5>(i_0_reg_69.read());
}

void kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln5_fu_80_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void kernel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_address0\" :  \"" << A_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_ce0\" :  \"" << A_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_V_q0\" :  \"" << A_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_V_address0\" :  \"" << x_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_V_ce0\" :  \"" << x_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V_q0\" :  \"" << x_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_address0\" :  \"" << y_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_ce0\" :  \"" << y_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_we0\" :  \"" << y_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_d0\" :  \"" << y_V_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

